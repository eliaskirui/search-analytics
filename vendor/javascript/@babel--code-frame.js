import*as e from"@babel/highlight";import*as t from"chalk";import r from"process";var n=e;try{"default"in e&&(n=e.default)}catch(e){}var o=t;try{"default"in t&&(o=t.default)}catch(e){}var a={};var s=r;Object.defineProperty(a,"__esModule",{value:true});a.codeFrameColumns=codeFrameColumns;a.default=_default;var l=n;var c=_interopRequireWildcard(o,true);function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(_getRequireWildcardCache=function(e){return e?r:t})(e)}function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=_getRequireWildcardCache(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var s=o?Object.getOwnPropertyDescriptor(e,a):null;s&&(s.get||s.set)?Object.defineProperty(n,a,s):n[a]=e[a]}return n.default=e,r&&r.set(e,n),n}let i;function getChalk(e){if(e){var t;(t=i)!=null?t:i=new c.default.constructor({enabled:true,level:1});return i}return c.default}let u=false;function getDefs(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}const f=/\r\n|[\n\r\u2028\u2029]/;function getMarkerLines(e,t,r){const n=Object.assign({column:0,line:-1},e.start);const o=Object.assign({},n,e.end);const{linesAbove:a=2,linesBelow:s=3}=r||{};const l=n.line;const c=n.column;const i=o.line;const u=o.column;let f=Math.max(l-(a+1),0);let d=Math.min(t.length,i+s);l===-1&&(f=0);i===-1&&(d=t.length);const m=i-l;const g={};if(m)for(let e=0;e<=m;e++){const r=e+l;if(c)if(e===0){const e=t[r-1].length;g[r]=[c,e-c+1]}else if(e===m)g[r]=[0,u];else{const n=t[r-e].length;g[r]=[0,n]}else g[r]=true}else g[l]=c===u?!c||[c,0]:[c,u-c];return{start:f,end:d,markerLines:g}}function codeFrameColumns(e,t,r={}){const n=(r.highlightCode||r.forceColor)&&(0,l.shouldHighlight)(r);const o=getChalk(r.forceColor);const a=getDefs(o);const maybeHighlight=(e,t)=>n?e(t):t;const s=e.split(f);const{start:c,end:i,markerLines:u}=getMarkerLines(t,s,r);const d=t.start&&typeof t.start.column==="number";const m=String(i).length;const g=n?(0,l.default)(e,r):e;let p=g.split(f,i).slice(c,i).map(((e,t)=>{const n=c+1+t;const o=` ${n}`.slice(-m);const s=` ${o} |`;const l=u[n];const i=!u[n+1];if(l){let t="";if(Array.isArray(l)){const n=e.slice(0,Math.max(l[0]-1,0)).replace(/[^\t]/g," ");const o=l[1]||1;t=["\n ",maybeHighlight(a.gutter,s.replace(/\d/g," "))," ",n,maybeHighlight(a.marker,"^").repeat(o)].join("");i&&r.message&&(t+=" "+maybeHighlight(a.message,r.message))}return[maybeHighlight(a.marker,">"),maybeHighlight(a.gutter,s),e.length>0?` ${e}`:"",t].join("")}return` ${maybeHighlight(a.gutter,s)}${e.length>0?` ${e}`:""}`})).join("\n");r.message&&!d&&(p=`${" ".repeat(m+1)}${r.message}\n${p}`);return n?o.reset(p):p}function _default(e,t,r,n={}){if(!u){u=true;const e="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(s.emitWarning)s.emitWarning(e,"DeprecationWarning");else{const t=new Error(e);t.name="DeprecationWarning";console.warn(new Error(e))}}r=Math.max(r,0);const o={start:{column:r,line:t}};return codeFrameColumns(e,o,n)}const d=a.__esModule;const m=a.codeFrameColumns;export{d as __esModule,m as codeFrameColumns,a as default};

