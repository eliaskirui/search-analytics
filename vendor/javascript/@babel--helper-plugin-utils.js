var e={};Object.defineProperty(e,"__esModule",{value:true});e.declare=declare;e.declarePreset=void 0;const r={assertVersion:e=>r=>{throwVersionError(r,e.version)}};Object.assign(r,{targets:()=>()=>({}),assumption:()=>()=>{}});function declare(e){return(t,o,s)=>{var a;let n;for(const e of Object.keys(r)){var i;if(!t[e]){null!=(i=n)?i:n=copyApiObject(t);n[e]=r[e](n)}}return e(null!=(a=n)?a:t,o||{},s)}}const t=declare;e.declarePreset=t;function copyApiObject(e){let r=null;if("string"===typeof e.version&&/^7\./.test(e.version)){r=Object.getPrototypeOf(e);!r||has(r,"version")&&has(r,"transform")&&has(r,"template")&&has(r,"types")||(r=null)}return Object.assign({},r,e)}function has(e,r){return Object.prototype.hasOwnProperty.call(e,r)}function throwVersionError(e,r){if("number"===typeof e){if(!Number.isInteger(e))throw new Error("Expected string or integer value.");e=`^${e}.0.0-0`}if("string"!==typeof e)throw new Error("Expected string or integer value.");const t=Error.stackTraceLimit;"number"===typeof t&&t<25&&(Error.stackTraceLimit=25);let o;o="7."===r.slice(0,2)?new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${r}". You'll need to update your @babel/core version.`):new Error(`Requires Babel "${e}", but was loaded with "${r}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);"number"===typeof t&&(Error.stackTraceLimit=t);throw Object.assign(o,{code:"BABEL_VERSION_UNSUPPORTED",version:r,range:e})}const o=e.__esModule;const s=e.declare,a=e.declarePreset;export{o as __esModule,s as declare,a as declarePreset,e as default};

