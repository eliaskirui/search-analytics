import*as e from"@jridgewell/trace-mapping";import*as n from"@jridgewell/gen-mapping";var t="default"in e?e.default:e;var o="default"in n?n.default:n;var r={};(function(e,n){r=n(t,o)})(0,(function(e,n){const t=SegmentObject("",-1,-1,"",null);const o=[];function SegmentObject(e,n,t,o,r){return{source:e,line:n,column:t,name:o,content:r}}function Source(e,n,t,o){return{map:e,sources:n,source:t,content:o}}function MapSource(e,n){return Source(e,n,"",null)}function OriginalSource(e,n){return Source(null,o,e,n)}function traceMappings(o){const r=new n.GenMapping({file:o.map.file});const{sources:c,map:s}=o;const i=s.names;const u=e.decodedMappings(s);for(let e=0;e<u.length;e++){const o=u[e];for(let s=0;s<o.length;s++){const u=o[s];const a=u[0];let l=t;if(1!==u.length){const e=c[u[1]];l=originalPositionFor(e,u[2],u[3],5===u.length?i[u[4]]:"");if(null==l)continue}const{column:p,line:f,name:m,content:g,source:d}=l;n.maybeAddSegment(r,e,a,d,f,p,m);d&&null!=g&&n.setSourceContent(r,d,g)}}return r}function originalPositionFor(n,o,r,c){if(!n.map)return SegmentObject(n.source,o,r,c,n.content);const s=e.traceSegment(n.map,o,r);return null==s?null:1===s.length?t:originalPositionFor(n.sources[s[1]],s[2],s[3],5===s.length?n.map.names[s[4]]:c)}function asArray(e){return Array.isArray(e)?e:[e]}function buildSourceMapTree(n,t){const o=asArray(n).map((n=>new e.TraceMap(n,"")));const r=o.pop();for(let e=0;e<o.length;e++)if(o[e].sources.length>1)throw new Error(`Transformation map ${e} must have exactly one source file.\nDid you specify these with the most recent transformation maps first?`);let c=build(r,t,"",0);for(let e=o.length-1;e>=0;e--)c=MapSource(o[e],[c]);return c}function build(n,t,o,r){const{resolvedSources:c,sourcesContent:s}=n;const i=r+1;const u=c.map(((n,r)=>{const c={importer:o,depth:i,source:n||"",content:void 0};const u=t(c.source,c);const{source:a,content:l}=c;if(u)return build(new e.TraceMap(u,a),t,a,i);const p=void 0!==l?l:s?s[r]:null;return OriginalSource(a,p)}));return MapSource(n,u)}class SourceMap{constructor(e,t){const o=t.decodedMappings?n.toDecodedMap(e):n.toEncodedMap(e);this.version=o.version;this.file=o.file;this.mappings=o.mappings;this.names=o.names;this.sourceRoot=o.sourceRoot;this.sources=o.sources;t.excludeContent||(this.sourcesContent=o.sourcesContent)}toString(){return JSON.stringify(this)}}function remapping(e,n,t){const o="object"===typeof t?t:{excludeContent:!!t,decodedMappings:false};const r=buildSourceMapTree(e,n);return new SourceMap(traceMappings(r),o)}return remapping}));var c=r;export{c as default};

