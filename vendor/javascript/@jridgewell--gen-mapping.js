import*as e from"@jridgewell/set-array";import*as n from"@jridgewell/sourcemap-codec";import*as t from"@jridgewell/trace-mapping";var o="default"in e?e.default:e;var s="default"in n?n.default:n;var r="default"in t?t.default:t;var a={};(function(e,n){n(a,o,s,r)})(0,(function(e,n,t,o){const s=0;const r=1;const a=2;const i=3;const l=4;const c=-1;e.addSegment=void 0;e.addMapping=void 0;e.maybeAddSegment=void 0;e.maybeAddMapping=void 0;e.setSourceContent=void 0;e.toDecodedMap=void 0;e.toEncodedMap=void 0;e.fromMap=void 0;e.allMappings=void 0;let u;class GenMapping{constructor({file:e,sourceRoot:t}={}){this._names=new n.SetArray;this._sources=new n.SetArray;this._sourcesContent=[];this._mappings=[];this.file=e;this.sourceRoot=t}}(()=>{e.addSegment=(e,n,t,o,s,r,a,i)=>u(false,e,n,t,o,s,r,a,i);e.maybeAddSegment=(e,n,t,o,s,r,a,i)=>u(true,e,n,t,o,s,r,a,i);e.addMapping=(e,n)=>addMappingInternal(false,e,n);e.maybeAddMapping=(e,n)=>addMappingInternal(true,e,n);e.setSourceContent=(e,t,o)=>{const{_sources:s,_sourcesContent:r}=e;r[n.put(s,t)]=o};e.toDecodedMap=e=>{const{file:n,sourceRoot:t,_mappings:o,_sources:s,_sourcesContent:r,_names:a}=e;removeEmptyFinalLines(o);return{version:3,file:n||void 0,names:a.array,sourceRoot:t||void 0,sources:s.array,sourcesContent:r,mappings:o}};e.toEncodedMap=n=>{const o=e.toDecodedMap(n);return Object.assign(Object.assign({},o),{mappings:t.encode(o.mappings)})};e.allMappings=e=>{const n=[];const{_mappings:t,_sources:o,_names:c}=e;for(let e=0;e<t.length;e++){const u=t[e];for(let t=0;t<u.length;t++){const p=u[t];const d={line:e+1,column:p[s]};let g;let m;let f;if(1!==p.length){g=o.array[p[r]];m={line:p[a]+1,column:p[i]};5===p.length&&(f=c.array[p[l]])}n.push({generated:d,source:g,original:m,name:f})}}return n};e.fromMap=e=>{const n=new o.TraceMap(e);const t=new GenMapping({file:n.file,sourceRoot:n.sourceRoot});putAll(t._names,n.names);putAll(t._sources,n.sources);t._sourcesContent=n.sourcesContent||n.sources.map((()=>null));t._mappings=o.decodedMappings(n);return t};u=(e,t,o,s,r,a,i,l,u)=>{const{_mappings:p,_sources:d,_sourcesContent:g,_names:m}=t;const f=getLine(p,o);const M=getColumnIndex(f,s);if(!r){if(e&&skipSourceless(f,M))return;return insert(f,M,[s])}const _=n.put(d,r);const h=l?n.put(m,l):c;_===g.length&&(g[_]=null!==u&&void 0!==u?u:null);if(!e||!skipSource(f,M,_,a,i,h))return insert(f,M,l?[s,_,a,i,h]:[s,_,a,i])}})();function getLine(e,n){for(let t=e.length;t<=n;t++)e[t]=[];return e[n]}function getColumnIndex(e,n){let t=e.length;for(let o=t-1;o>=0;t=o--){const t=e[o];if(n>=t[s])break}return t}function insert(e,n,t){for(let t=e.length;t>n;t--)e[t]=e[t-1];e[n]=t}function removeEmptyFinalLines(e){const{length:n}=e;let t=n;for(let n=t-1;n>=0;t=n,n--)if(e[n].length>0)break;t<n&&(e.length=t)}function putAll(e,t){for(let o=0;o<t.length;o++)n.put(e,t[o])}function skipSourceless(e,n){if(0===n)return true;const t=e[n-1];return 1===t.length}function skipSource(e,n,t,o,s,u){if(0===n)return false;const p=e[n-1];return 1!==p.length&&(t===p[r]&&o===p[a]&&s===p[i]&&u===(5===p.length?p[l]:c))}function addMappingInternal(e,n,t){const{generated:o,source:s,original:r,name:a,content:i}=t;if(!s)return u(e,n,o.line-1,o.column,null,null,null,null,null);const l=s;return u(e,n,o.line-1,o.column,l,r.line-1,r.column,a,i)}e.GenMapping=GenMapping;Object.defineProperty(e,"__esModule",{value:true})}));const i=a.addSegment,l=a.addMapping,c=a.maybeAddSegment,u=a.maybeAddMapping,p=a.setSourceContent,d=a.toDecodedMap,g=a.toEncodedMap,m=a.fromMap,f=a.allMappings,M=a.GenMapping,_=a.__esModule;export{M as GenMapping,_ as __esModule,l as addMapping,i as addSegment,f as allMappings,a as default,m as fromMap,u as maybeAddMapping,c as maybeAddSegment,p as setSourceContent,d as toDecodedMap,g as toEncodedMap};

