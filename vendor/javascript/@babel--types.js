import{d as e}from"../_/P-qWVocc.js";import"../_/i069Usiy.js";import"../_/QWVxbrSh.js";import"../_/8dHU3KMb.js";import"../_/Pab8ARcG.js";import"to-fast-properties";import"@babel/helper-validator-identifier";import"@babel/helper-string-parser";import"../_/IFEQyRA2.js";import"process";import"../_/Nju4bfC9.js";import"../_/J35sw0Fk.js";const s=e();var a=s.__esModule,t=s.__internal__deprecationWarning,r=s.addComment,i=s.addComments,n=s.appendToMemberExpression,o=s.assertNode,p=s.buildMatchMemberExpression,l=s.clone,T=s.cloneDeep,S=s.cloneDeepWithoutLoc,c=s.cloneNode,y=s.cloneWithoutLoc,E=s.createFlowUnionType,m=s.createTSUnionType,d=s.createTypeAnnotationBasedOnTypeof,u=s.createUnionTypeAnnotation,A=s.ensureBlock,x=s.getBindingIdentifiers,P=s.getOuterBindingIdentifiers,I=s.inheritInnerComments,D=s.inheritLeadingComments,b=s.inheritTrailingComments,N=s.inherits,O=s.inheritsComments,f=s.is,g=s.isBinding,L=s.isBlockScoped,C=s.isImmutable,M=s.isLet,B=s.isNode,R=s.isNodesEquivalent,h=s.isPlaceholderType,w=s.isReferenced,_=s.isScope,F=s.isSpecifierDefault,Y=s.isType,K=s.isValidES3Identifier,j=s.isValidIdentifier,X=s.isVar,U=s.matchesPattern,J=s.prependToMemberExpression,v=s.react,k=s.removeComments,V=s.removeProperties,W=s.removePropertiesDeep,q=s.removeTypeDuplicates,Q=s.shallowEqual,z=s.toBindingIdentifierName,H=s.toBlock,G=s.toComputedKey,Z=s.toExpression,$=s.toIdentifier,ee=s.toKeyAlias,se=s.toStatement,ae=s.traverse,te=s.traverseFast,re=s.validate,ie=s.valueToNode,ne=s.toSequenceExpression,oe=s.assertAccessor,pe=s.assertAnyTypeAnnotation,le=s.assertArgumentPlaceholder,Te=s.assertArrayExpression,Se=s.assertArrayPattern,ce=s.assertArrayTypeAnnotation,ye=s.assertArrowFunctionExpression,Ee=s.assertAssignmentExpression,me=s.assertAssignmentPattern,de=s.assertAwaitExpression,ue=s.assertBigIntLiteral,Ae=s.assertBinary,xe=s.assertBinaryExpression,Pe=s.assertBindExpression,Ie=s.assertBlock,De=s.assertBlockParent,be=s.assertBlockStatement,Ne=s.assertBooleanLiteral,Oe=s.assertBooleanLiteralTypeAnnotation,fe=s.assertBooleanTypeAnnotation,ge=s.assertBreakStatement,Le=s.assertCallExpression,Ce=s.assertCatchClause,Me=s.assertClass,Be=s.assertClassAccessorProperty,Re=s.assertClassBody,he=s.assertClassDeclaration,we=s.assertClassExpression,_e=s.assertClassImplements,Fe=s.assertClassMethod,Ye=s.assertClassPrivateMethod,Ke=s.assertClassPrivateProperty,je=s.assertClassProperty,Xe=s.assertCompletionStatement,Ue=s.assertConditional,Je=s.assertConditionalExpression,ve=s.assertContinueStatement,ke=s.assertDebuggerStatement,Ve=s.assertDecimalLiteral,We=s.assertDeclaration,qe=s.assertDeclareClass,Qe=s.assertDeclareExportAllDeclaration,ze=s.assertDeclareExportDeclaration,He=s.assertDeclareFunction,Ge=s.assertDeclareInterface,Ze=s.assertDeclareModule,$e=s.assertDeclareModuleExports,es=s.assertDeclareOpaqueType,ss=s.assertDeclareTypeAlias,as=s.assertDeclareVariable,ts=s.assertDeclaredPredicate,rs=s.assertDecorator,is=s.assertDirective,ns=s.assertDirectiveLiteral,os=s.assertDoExpression,ps=s.assertDoWhileStatement,ls=s.assertEmptyStatement,Ts=s.assertEmptyTypeAnnotation,Ss=s.assertEnumBody,cs=s.assertEnumBooleanBody,ys=s.assertEnumBooleanMember,Es=s.assertEnumDeclaration,ms=s.assertEnumDefaultedMember,ds=s.assertEnumMember,us=s.assertEnumNumberBody,As=s.assertEnumNumberMember,xs=s.assertEnumStringBody,Ps=s.assertEnumStringMember,Is=s.assertEnumSymbolBody,Ds=s.assertExistsTypeAnnotation,bs=s.assertExportAllDeclaration,Ns=s.assertExportDeclaration,Os=s.assertExportDefaultDeclaration,fs=s.assertExportDefaultSpecifier,gs=s.assertExportNamedDeclaration,Ls=s.assertExportNamespaceSpecifier,Cs=s.assertExportSpecifier,Ms=s.assertExpression,Bs=s.assertExpressionStatement,Rs=s.assertExpressionWrapper,hs=s.assertFile,ws=s.assertFlow,_s=s.assertFlowBaseAnnotation,Fs=s.assertFlowDeclaration,Ys=s.assertFlowPredicate,Ks=s.assertFlowType,js=s.assertFor,Xs=s.assertForInStatement,Us=s.assertForOfStatement,Js=s.assertForStatement,vs=s.assertForXStatement,ks=s.assertFunction,Vs=s.assertFunctionDeclaration,Ws=s.assertFunctionExpression,qs=s.assertFunctionParent,Qs=s.assertFunctionTypeAnnotation,zs=s.assertFunctionTypeParam,Hs=s.assertGenericTypeAnnotation,Gs=s.assertIdentifier,Zs=s.assertIfStatement,$s=s.assertImmutable,ea=s.assertImport,sa=s.assertImportAttribute,aa=s.assertImportDeclaration,ta=s.assertImportDefaultSpecifier,ra=s.assertImportExpression,ia=s.assertImportNamespaceSpecifier,na=s.assertImportOrExportDeclaration,oa=s.assertImportSpecifier,pa=s.assertIndexedAccessType,la=s.assertInferredPredicate,Ta=s.assertInterfaceDeclaration,Sa=s.assertInterfaceExtends,ca=s.assertInterfaceTypeAnnotation,ya=s.assertInterpreterDirective,Ea=s.assertIntersectionTypeAnnotation,ma=s.assertJSX,da=s.assertJSXAttribute,ua=s.assertJSXClosingElement,Aa=s.assertJSXClosingFragment,xa=s.assertJSXElement,Pa=s.assertJSXEmptyExpression,Ia=s.assertJSXExpressionContainer,Da=s.assertJSXFragment,ba=s.assertJSXIdentifier,Na=s.assertJSXMemberExpression,Oa=s.assertJSXNamespacedName,fa=s.assertJSXOpeningElement,ga=s.assertJSXOpeningFragment,La=s.assertJSXSpreadAttribute,Ca=s.assertJSXSpreadChild,Ma=s.assertJSXText,Ba=s.assertLVal,Ra=s.assertLabeledStatement,ha=s.assertLiteral,wa=s.assertLogicalExpression,_a=s.assertLoop,Fa=s.assertMemberExpression,Ya=s.assertMetaProperty,Ka=s.assertMethod,ja=s.assertMiscellaneous,Xa=s.assertMixedTypeAnnotation,Ua=s.assertModuleDeclaration,Ja=s.assertModuleExpression,va=s.assertModuleSpecifier,ka=s.assertNewExpression,Va=s.assertNoop,Wa=s.assertNullLiteral,qa=s.assertNullLiteralTypeAnnotation,Qa=s.assertNullableTypeAnnotation,za=s.assertNumberLiteral,Ha=s.assertNumberLiteralTypeAnnotation,Ga=s.assertNumberTypeAnnotation,Za=s.assertNumericLiteral,$a=s.assertObjectExpression,et=s.assertObjectMember,st=s.assertObjectMethod,at=s.assertObjectPattern,tt=s.assertObjectProperty,rt=s.assertObjectTypeAnnotation,it=s.assertObjectTypeCallProperty,nt=s.assertObjectTypeIndexer,ot=s.assertObjectTypeInternalSlot,pt=s.assertObjectTypeProperty,lt=s.assertObjectTypeSpreadProperty,Tt=s.assertOpaqueType,St=s.assertOptionalCallExpression,ct=s.assertOptionalIndexedAccessType,yt=s.assertOptionalMemberExpression,Et=s.assertParenthesizedExpression,mt=s.assertPattern,dt=s.assertPatternLike,ut=s.assertPipelineBareFunction,At=s.assertPipelinePrimaryTopicReference,xt=s.assertPipelineTopicExpression,Pt=s.assertPlaceholder,It=s.assertPrivate,Dt=s.assertPrivateName,bt=s.assertProgram,Nt=s.assertProperty,Ot=s.assertPureish,ft=s.assertQualifiedTypeIdentifier,gt=s.assertRecordExpression,Lt=s.assertRegExpLiteral,Ct=s.assertRegexLiteral,Mt=s.assertRestElement,Bt=s.assertRestProperty,Rt=s.assertReturnStatement,ht=s.assertScopable,wt=s.assertSequenceExpression,_t=s.assertSpreadElement,Ft=s.assertSpreadProperty,Yt=s.assertStandardized,Kt=s.assertStatement,jt=s.assertStaticBlock,Xt=s.assertStringLiteral,Ut=s.assertStringLiteralTypeAnnotation,Jt=s.assertStringTypeAnnotation,vt=s.assertSuper,kt=s.assertSwitchCase,Vt=s.assertSwitchStatement,Wt=s.assertSymbolTypeAnnotation,qt=s.assertTSAnyKeyword,Qt=s.assertTSArrayType,zt=s.assertTSAsExpression,Ht=s.assertTSBaseType,Gt=s.assertTSBigIntKeyword,Zt=s.assertTSBooleanKeyword,$t=s.assertTSCallSignatureDeclaration,er=s.assertTSConditionalType,sr=s.assertTSConstructSignatureDeclaration,ar=s.assertTSConstructorType,tr=s.assertTSDeclareFunction,rr=s.assertTSDeclareMethod,ir=s.assertTSEntityName,nr=s.assertTSEnumDeclaration,or=s.assertTSEnumMember,pr=s.assertTSExportAssignment,lr=s.assertTSExpressionWithTypeArguments,Tr=s.assertTSExternalModuleReference,Sr=s.assertTSFunctionType,cr=s.assertTSImportEqualsDeclaration,yr=s.assertTSImportType,Er=s.assertTSIndexSignature,mr=s.assertTSIndexedAccessType,dr=s.assertTSInferType,ur=s.assertTSInstantiationExpression,Ar=s.assertTSInterfaceBody,xr=s.assertTSInterfaceDeclaration,Pr=s.assertTSIntersectionType,Ir=s.assertTSIntrinsicKeyword,Dr=s.assertTSLiteralType,br=s.assertTSMappedType,Nr=s.assertTSMethodSignature,Or=s.assertTSModuleBlock,fr=s.assertTSModuleDeclaration,gr=s.assertTSNamedTupleMember,Lr=s.assertTSNamespaceExportDeclaration,Cr=s.assertTSNeverKeyword,Mr=s.assertTSNonNullExpression,Br=s.assertTSNullKeyword,Rr=s.assertTSNumberKeyword,hr=s.assertTSObjectKeyword,wr=s.assertTSOptionalType,_r=s.assertTSParameterProperty,Fr=s.assertTSParenthesizedType,Yr=s.assertTSPropertySignature,Kr=s.assertTSQualifiedName,jr=s.assertTSRestType,Xr=s.assertTSSatisfiesExpression,Ur=s.assertTSStringKeyword,Jr=s.assertTSSymbolKeyword,vr=s.assertTSThisType,kr=s.assertTSTupleType,Vr=s.assertTSType,Wr=s.assertTSTypeAliasDeclaration,qr=s.assertTSTypeAnnotation,Qr=s.assertTSTypeAssertion,zr=s.assertTSTypeElement,Hr=s.assertTSTypeLiteral,Gr=s.assertTSTypeOperator,Zr=s.assertTSTypeParameter,$r=s.assertTSTypeParameterDeclaration,ei=s.assertTSTypeParameterInstantiation,si=s.assertTSTypePredicate,ai=s.assertTSTypeQuery,ti=s.assertTSTypeReference,ri=s.assertTSUndefinedKeyword,ii=s.assertTSUnionType,ni=s.assertTSUnknownKeyword,oi=s.assertTSVoidKeyword,pi=s.assertTaggedTemplateExpression,li=s.assertTemplateElement,Ti=s.assertTemplateLiteral,Si=s.assertTerminatorless,ci=s.assertThisExpression,yi=s.assertThisTypeAnnotation,Ei=s.assertThrowStatement,mi=s.assertTopicReference,di=s.assertTryStatement,ui=s.assertTupleExpression,Ai=s.assertTupleTypeAnnotation,xi=s.assertTypeAlias,Pi=s.assertTypeAnnotation,Ii=s.assertTypeCastExpression,Di=s.assertTypeParameter,bi=s.assertTypeParameterDeclaration,Ni=s.assertTypeParameterInstantiation,Oi=s.assertTypeScript,fi=s.assertTypeofTypeAnnotation,gi=s.assertUnaryExpression,Li=s.assertUnaryLike,Ci=s.assertUnionTypeAnnotation,Mi=s.assertUpdateExpression,Bi=s.assertUserWhitespacable,Ri=s.assertV8IntrinsicIdentifier,hi=s.assertVariableDeclaration,wi=s.assertVariableDeclarator,_i=s.assertVariance,Fi=s.assertVoidTypeAnnotation,Yi=s.assertWhile,Ki=s.assertWhileStatement,ji=s.assertWithStatement,Xi=s.assertYieldExpression,Ui=s.anyTypeAnnotation,Ji=s.argumentPlaceholder,vi=s.arrayExpression,ki=s.arrayPattern,Vi=s.arrayTypeAnnotation,Wi=s.arrowFunctionExpression,qi=s.assignmentExpression,Qi=s.assignmentPattern,zi=s.awaitExpression,Hi=s.bigIntLiteral,Gi=s.binaryExpression,Zi=s.bindExpression,$i=s.blockStatement,en=s.booleanLiteral,sn=s.booleanLiteralTypeAnnotation,an=s.booleanTypeAnnotation,tn=s.breakStatement,rn=s.callExpression,nn=s.catchClause,on=s.classAccessorProperty,pn=s.classBody,ln=s.classDeclaration,Tn=s.classExpression,Sn=s.classImplements,cn=s.classMethod,yn=s.classPrivateMethod,En=s.classPrivateProperty,mn=s.classProperty,dn=s.conditionalExpression,un=s.continueStatement,An=s.debuggerStatement,xn=s.decimalLiteral,Pn=s.declareClass,In=s.declareExportAllDeclaration,Dn=s.declareExportDeclaration,bn=s.declareFunction,Nn=s.declareInterface,On=s.declareModule,fn=s.declareModuleExports,gn=s.declareOpaqueType,Ln=s.declareTypeAlias,Cn=s.declareVariable,Mn=s.declaredPredicate,Bn=s.decorator,Rn=s.directive,hn=s.directiveLiteral,wn=s.doExpression,_n=s.doWhileStatement,Fn=s.emptyStatement,Yn=s.emptyTypeAnnotation,Kn=s.enumBooleanBody,jn=s.enumBooleanMember,Xn=s.enumDeclaration,Un=s.enumDefaultedMember,Jn=s.enumNumberBody,vn=s.enumNumberMember,kn=s.enumStringBody,Vn=s.enumStringMember,Wn=s.enumSymbolBody,qn=s.existsTypeAnnotation,Qn=s.exportAllDeclaration,zn=s.exportDefaultDeclaration,Hn=s.exportDefaultSpecifier,Gn=s.exportNamedDeclaration,Zn=s.exportNamespaceSpecifier,$n=s.exportSpecifier,eo=s.expressionStatement,so=s.file,ao=s.forInStatement,to=s.forOfStatement,ro=s.forStatement,io=s.functionDeclaration,no=s.functionExpression,oo=s.functionTypeAnnotation,po=s.functionTypeParam,lo=s.genericTypeAnnotation,To=s.identifier,So=s.ifStatement,co=s.import,yo=s.importAttribute,Eo=s.importDeclaration,mo=s.importDefaultSpecifier,uo=s.importExpression,Ao=s.importNamespaceSpecifier,xo=s.importSpecifier,Po=s.indexedAccessType,Io=s.inferredPredicate,Do=s.interfaceDeclaration,bo=s.interfaceExtends,No=s.interfaceTypeAnnotation,Oo=s.interpreterDirective,fo=s.intersectionTypeAnnotation,go=s.jSXAttribute,Lo=s.jsxAttribute,Co=s.jSXClosingElement,Mo=s.jsxClosingElement,Bo=s.jSXClosingFragment,Ro=s.jsxClosingFragment,ho=s.jSXElement,wo=s.jsxElement,_o=s.jSXEmptyExpression,Fo=s.jsxEmptyExpression,Yo=s.jSXExpressionContainer,Ko=s.jsxExpressionContainer,jo=s.jSXFragment,Xo=s.jsxFragment,Uo=s.jSXIdentifier,Jo=s.jsxIdentifier,vo=s.jSXMemberExpression,ko=s.jsxMemberExpression,Vo=s.jSXNamespacedName,Wo=s.jsxNamespacedName,qo=s.jSXOpeningElement,Qo=s.jsxOpeningElement,zo=s.jSXOpeningFragment,Ho=s.jsxOpeningFragment,Go=s.jSXSpreadAttribute,Zo=s.jsxSpreadAttribute,$o=s.jSXSpreadChild,ep=s.jsxSpreadChild,sp=s.jSXText,ap=s.jsxText,tp=s.labeledStatement,rp=s.logicalExpression,ip=s.memberExpression,np=s.metaProperty,op=s.mixedTypeAnnotation,pp=s.moduleExpression,lp=s.newExpression,Tp=s.noop,Sp=s.nullLiteral,cp=s.nullLiteralTypeAnnotation,yp=s.nullableTypeAnnotation,Ep=s.numberLiteral,mp=s.numberLiteralTypeAnnotation,dp=s.numberTypeAnnotation,up=s.numericLiteral,Ap=s.objectExpression,xp=s.objectMethod,Pp=s.objectPattern,Ip=s.objectProperty,Dp=s.objectTypeAnnotation,bp=s.objectTypeCallProperty,Np=s.objectTypeIndexer,Op=s.objectTypeInternalSlot,fp=s.objectTypeProperty,gp=s.objectTypeSpreadProperty,Lp=s.opaqueType,Cp=s.optionalCallExpression,Mp=s.optionalIndexedAccessType,Bp=s.optionalMemberExpression,Rp=s.parenthesizedExpression,hp=s.pipelineBareFunction,wp=s.pipelinePrimaryTopicReference,_p=s.pipelineTopicExpression,Fp=s.placeholder,Yp=s.privateName,Kp=s.program,jp=s.qualifiedTypeIdentifier,Xp=s.recordExpression,Up=s.regExpLiteral,Jp=s.regexLiteral,vp=s.restElement,kp=s.restProperty,Vp=s.returnStatement,Wp=s.sequenceExpression,qp=s.spreadElement,Qp=s.spreadProperty,zp=s.staticBlock,Hp=s.stringLiteral,Gp=s.stringLiteralTypeAnnotation,Zp=s.stringTypeAnnotation,$p=s.super,el=s.switchCase,sl=s.switchStatement,al=s.symbolTypeAnnotation,tl=s.taggedTemplateExpression,rl=s.templateElement,il=s.templateLiteral,nl=s.thisExpression,ol=s.thisTypeAnnotation,pl=s.throwStatement,ll=s.topicReference,Tl=s.tryStatement,Sl=s.tSAnyKeyword,cl=s.tsAnyKeyword,yl=s.tSArrayType,El=s.tsArrayType,ml=s.tSAsExpression,dl=s.tsAsExpression,ul=s.tSBigIntKeyword,Al=s.tsBigIntKeyword,xl=s.tSBooleanKeyword,Pl=s.tsBooleanKeyword,Il=s.tSCallSignatureDeclaration,Dl=s.tsCallSignatureDeclaration,bl=s.tSConditionalType,Nl=s.tsConditionalType,Ol=s.tSConstructSignatureDeclaration,fl=s.tsConstructSignatureDeclaration,gl=s.tSConstructorType,Ll=s.tsConstructorType,Cl=s.tSDeclareFunction,Ml=s.tsDeclareFunction,Bl=s.tSDeclareMethod,Rl=s.tsDeclareMethod,hl=s.tSEnumDeclaration,wl=s.tsEnumDeclaration,_l=s.tSEnumMember,Fl=s.tsEnumMember,Yl=s.tSExportAssignment,Kl=s.tsExportAssignment,jl=s.tSExpressionWithTypeArguments,Xl=s.tsExpressionWithTypeArguments,Ul=s.tSExternalModuleReference,Jl=s.tsExternalModuleReference,vl=s.tSFunctionType,kl=s.tsFunctionType,Vl=s.tSImportEqualsDeclaration,Wl=s.tsImportEqualsDeclaration,ql=s.tSImportType,Ql=s.tsImportType,zl=s.tSIndexSignature,Hl=s.tsIndexSignature,Gl=s.tSIndexedAccessType,Zl=s.tsIndexedAccessType,$l=s.tSInferType,eT=s.tsInferType,sT=s.tSInstantiationExpression,aT=s.tsInstantiationExpression,tT=s.tSInterfaceBody,rT=s.tsInterfaceBody,iT=s.tSInterfaceDeclaration,nT=s.tsInterfaceDeclaration,oT=s.tSIntersectionType,pT=s.tsIntersectionType,lT=s.tSIntrinsicKeyword,TT=s.tsIntrinsicKeyword,ST=s.tSLiteralType,cT=s.tsLiteralType,yT=s.tSMappedType,ET=s.tsMappedType,mT=s.tSMethodSignature,dT=s.tsMethodSignature,uT=s.tSModuleBlock,AT=s.tsModuleBlock,xT=s.tSModuleDeclaration,PT=s.tsModuleDeclaration,IT=s.tSNamedTupleMember,DT=s.tsNamedTupleMember,bT=s.tSNamespaceExportDeclaration,NT=s.tsNamespaceExportDeclaration,OT=s.tSNeverKeyword,fT=s.tsNeverKeyword,gT=s.tSNonNullExpression,LT=s.tsNonNullExpression,CT=s.tSNullKeyword,MT=s.tsNullKeyword,BT=s.tSNumberKeyword,RT=s.tsNumberKeyword,hT=s.tSObjectKeyword,wT=s.tsObjectKeyword,_T=s.tSOptionalType,FT=s.tsOptionalType,YT=s.tSParameterProperty,KT=s.tsParameterProperty,jT=s.tSParenthesizedType,XT=s.tsParenthesizedType,UT=s.tSPropertySignature,JT=s.tsPropertySignature,vT=s.tSQualifiedName,kT=s.tsQualifiedName,VT=s.tSRestType,WT=s.tsRestType,qT=s.tSSatisfiesExpression,QT=s.tsSatisfiesExpression,zT=s.tSStringKeyword,HT=s.tsStringKeyword,GT=s.tSSymbolKeyword,ZT=s.tsSymbolKeyword,$T=s.tSThisType,eS=s.tsThisType,sS=s.tSTupleType,aS=s.tsTupleType,tS=s.tSTypeAliasDeclaration,rS=s.tsTypeAliasDeclaration,iS=s.tSTypeAnnotation,nS=s.tsTypeAnnotation,oS=s.tSTypeAssertion,pS=s.tsTypeAssertion,lS=s.tSTypeLiteral,TS=s.tsTypeLiteral,SS=s.tSTypeOperator,cS=s.tsTypeOperator,yS=s.tSTypeParameter,ES=s.tsTypeParameter,mS=s.tSTypeParameterDeclaration,dS=s.tsTypeParameterDeclaration,uS=s.tSTypeParameterInstantiation,AS=s.tsTypeParameterInstantiation,xS=s.tSTypePredicate,PS=s.tsTypePredicate,IS=s.tSTypeQuery,DS=s.tsTypeQuery,bS=s.tSTypeReference,NS=s.tsTypeReference,OS=s.tSUndefinedKeyword,fS=s.tsUndefinedKeyword,gS=s.tSUnionType,LS=s.tsUnionType,CS=s.tSUnknownKeyword,MS=s.tsUnknownKeyword,BS=s.tSVoidKeyword,RS=s.tsVoidKeyword,hS=s.tupleExpression,wS=s.tupleTypeAnnotation,_S=s.typeAlias,FS=s.typeAnnotation,YS=s.typeCastExpression,KS=s.typeParameter,jS=s.typeParameterDeclaration,XS=s.typeParameterInstantiation,US=s.typeofTypeAnnotation,JS=s.unaryExpression,vS=s.unionTypeAnnotation,kS=s.updateExpression,VS=s.v8IntrinsicIdentifier,WS=s.variableDeclaration,qS=s.variableDeclarator,QS=s.variance,zS=s.voidTypeAnnotation,HS=s.whileStatement,GS=s.withStatement,ZS=s.yieldExpression,$S=s.AnyTypeAnnotation,ec=s.ArgumentPlaceholder,sc=s.ArrayExpression,ac=s.ArrayPattern,tc=s.ArrayTypeAnnotation,rc=s.ArrowFunctionExpression,ic=s.AssignmentExpression,nc=s.AssignmentPattern,oc=s.AwaitExpression,pc=s.BigIntLiteral,lc=s.BinaryExpression,Tc=s.BindExpression,Sc=s.BlockStatement,cc=s.BooleanLiteral,yc=s.BooleanLiteralTypeAnnotation,Ec=s.BooleanTypeAnnotation,mc=s.BreakStatement,dc=s.CallExpression,uc=s.CatchClause,Ac=s.ClassAccessorProperty,xc=s.ClassBody,Pc=s.ClassDeclaration,Ic=s.ClassExpression,Dc=s.ClassImplements,bc=s.ClassMethod,Nc=s.ClassPrivateMethod,Oc=s.ClassPrivateProperty,fc=s.ClassProperty,gc=s.ConditionalExpression,Lc=s.ContinueStatement,Cc=s.DebuggerStatement,Mc=s.DecimalLiteral,Bc=s.DeclareClass,Rc=s.DeclareExportAllDeclaration,hc=s.DeclareExportDeclaration,wc=s.DeclareFunction,_c=s.DeclareInterface,Fc=s.DeclareModule,Yc=s.DeclareModuleExports,Kc=s.DeclareOpaqueType,jc=s.DeclareTypeAlias,Xc=s.DeclareVariable,Uc=s.DeclaredPredicate,Jc=s.Decorator,vc=s.Directive,kc=s.DirectiveLiteral,Vc=s.DoExpression,Wc=s.DoWhileStatement,qc=s.EmptyStatement,Qc=s.EmptyTypeAnnotation,zc=s.EnumBooleanBody,Hc=s.EnumBooleanMember,Gc=s.EnumDeclaration,Zc=s.EnumDefaultedMember,$c=s.EnumNumberBody,ey=s.EnumNumberMember,sy=s.EnumStringBody,ay=s.EnumStringMember,ty=s.EnumSymbolBody,ry=s.ExistsTypeAnnotation,iy=s.ExportAllDeclaration,ny=s.ExportDefaultDeclaration,oy=s.ExportDefaultSpecifier,py=s.ExportNamedDeclaration,ly=s.ExportNamespaceSpecifier,Ty=s.ExportSpecifier,Sy=s.ExpressionStatement,cy=s.File,yy=s.ForInStatement,Ey=s.ForOfStatement,my=s.ForStatement,dy=s.FunctionDeclaration,uy=s.FunctionExpression,Ay=s.FunctionTypeAnnotation,xy=s.FunctionTypeParam,Py=s.GenericTypeAnnotation,Iy=s.Identifier,Dy=s.IfStatement,by=s.Import,Ny=s.ImportAttribute,Oy=s.ImportDeclaration,fy=s.ImportDefaultSpecifier,gy=s.ImportExpression,Ly=s.ImportNamespaceSpecifier,Cy=s.ImportSpecifier,My=s.IndexedAccessType,By=s.InferredPredicate,Ry=s.InterfaceDeclaration,hy=s.InterfaceExtends,wy=s.InterfaceTypeAnnotation,_y=s.InterpreterDirective,Fy=s.IntersectionTypeAnnotation,Yy=s.JSXAttribute,Ky=s.JSXClosingElement,jy=s.JSXClosingFragment,Xy=s.JSXElement,Uy=s.JSXEmptyExpression,Jy=s.JSXExpressionContainer,vy=s.JSXFragment,ky=s.JSXIdentifier,Vy=s.JSXMemberExpression,Wy=s.JSXNamespacedName,qy=s.JSXOpeningElement,Qy=s.JSXOpeningFragment,zy=s.JSXSpreadAttribute,Hy=s.JSXSpreadChild,Gy=s.JSXText,Zy=s.LabeledStatement,$y=s.LogicalExpression,eE=s.MemberExpression,sE=s.MetaProperty,aE=s.MixedTypeAnnotation,tE=s.ModuleExpression,rE=s.NewExpression,iE=s.Noop,nE=s.NullLiteral,oE=s.NullLiteralTypeAnnotation,pE=s.NullableTypeAnnotation,lE=s.NumberLiteral,TE=s.NumberLiteralTypeAnnotation,SE=s.NumberTypeAnnotation,cE=s.NumericLiteral,yE=s.ObjectExpression,EE=s.ObjectMethod,mE=s.ObjectPattern,dE=s.ObjectProperty,uE=s.ObjectTypeAnnotation,AE=s.ObjectTypeCallProperty,xE=s.ObjectTypeIndexer,PE=s.ObjectTypeInternalSlot,IE=s.ObjectTypeProperty,DE=s.ObjectTypeSpreadProperty,bE=s.OpaqueType,NE=s.OptionalCallExpression,OE=s.OptionalIndexedAccessType,fE=s.OptionalMemberExpression,gE=s.ParenthesizedExpression,LE=s.PipelineBareFunction,CE=s.PipelinePrimaryTopicReference,ME=s.PipelineTopicExpression,BE=s.Placeholder,RE=s.PrivateName,hE=s.Program,wE=s.QualifiedTypeIdentifier,_E=s.RecordExpression,FE=s.RegExpLiteral,YE=s.RegexLiteral,KE=s.RestElement,jE=s.RestProperty,XE=s.ReturnStatement,UE=s.SequenceExpression,JE=s.SpreadElement,vE=s.SpreadProperty,kE=s.StaticBlock,VE=s.StringLiteral,WE=s.StringLiteralTypeAnnotation,qE=s.StringTypeAnnotation,QE=s.Super,zE=s.SwitchCase,HE=s.SwitchStatement,GE=s.SymbolTypeAnnotation,ZE=s.TSAnyKeyword,$E=s.TSArrayType,em=s.TSAsExpression,sm=s.TSBigIntKeyword,am=s.TSBooleanKeyword,tm=s.TSCallSignatureDeclaration,rm=s.TSConditionalType,im=s.TSConstructSignatureDeclaration,nm=s.TSConstructorType,om=s.TSDeclareFunction,pm=s.TSDeclareMethod,lm=s.TSEnumDeclaration,Tm=s.TSEnumMember,Sm=s.TSExportAssignment,cm=s.TSExpressionWithTypeArguments,ym=s.TSExternalModuleReference,Em=s.TSFunctionType,mm=s.TSImportEqualsDeclaration,dm=s.TSImportType,um=s.TSIndexSignature,Am=s.TSIndexedAccessType,xm=s.TSInferType,Pm=s.TSInstantiationExpression,Im=s.TSInterfaceBody,Dm=s.TSInterfaceDeclaration,bm=s.TSIntersectionType,Nm=s.TSIntrinsicKeyword,Om=s.TSLiteralType,fm=s.TSMappedType,gm=s.TSMethodSignature,Lm=s.TSModuleBlock,Cm=s.TSModuleDeclaration,Mm=s.TSNamedTupleMember,Bm=s.TSNamespaceExportDeclaration,Rm=s.TSNeverKeyword,hm=s.TSNonNullExpression,wm=s.TSNullKeyword,_m=s.TSNumberKeyword,Fm=s.TSObjectKeyword,Ym=s.TSOptionalType,Km=s.TSParameterProperty,jm=s.TSParenthesizedType,Xm=s.TSPropertySignature,Um=s.TSQualifiedName,Jm=s.TSRestType,vm=s.TSSatisfiesExpression,km=s.TSStringKeyword,Vm=s.TSSymbolKeyword,Wm=s.TSThisType,qm=s.TSTupleType,Qm=s.TSTypeAliasDeclaration,zm=s.TSTypeAnnotation,Hm=s.TSTypeAssertion,Gm=s.TSTypeLiteral,Zm=s.TSTypeOperator,$m=s.TSTypeParameter,ed=s.TSTypeParameterDeclaration,sd=s.TSTypeParameterInstantiation,ad=s.TSTypePredicate,td=s.TSTypeQuery,rd=s.TSTypeReference,id=s.TSUndefinedKeyword,nd=s.TSUnionType,od=s.TSUnknownKeyword,pd=s.TSVoidKeyword,ld=s.TaggedTemplateExpression,Td=s.TemplateElement,Sd=s.TemplateLiteral,cd=s.ThisExpression,yd=s.ThisTypeAnnotation,Ed=s.ThrowStatement,md=s.TopicReference,dd=s.TryStatement,ud=s.TupleExpression,Ad=s.TupleTypeAnnotation,xd=s.TypeAlias,Pd=s.TypeAnnotation,Id=s.TypeCastExpression,Dd=s.TypeParameter,bd=s.TypeParameterDeclaration,Nd=s.TypeParameterInstantiation,Od=s.TypeofTypeAnnotation,fd=s.UnaryExpression,gd=s.UnionTypeAnnotation,Ld=s.UpdateExpression,Cd=s.V8IntrinsicIdentifier,Md=s.VariableDeclaration,Bd=s.VariableDeclarator,Rd=s.Variance,hd=s.VoidTypeAnnotation,wd=s.WhileStatement,_d=s.WithStatement,Fd=s.YieldExpression,Yd=s.buildUndefinedNode,Kd=s.WHILE_TYPES,jd=s.USERWHITESPACABLE_TYPES,Xd=s.UNARYLIKE_TYPES,Ud=s.TYPESCRIPT_TYPES,Jd=s.TSTYPE_TYPES,vd=s.TSTYPEELEMENT_TYPES,kd=s.TSENTITYNAME_TYPES,Vd=s.TSBASETYPE_TYPES,Wd=s.TERMINATORLESS_TYPES,qd=s.STATEMENT_TYPES,Qd=s.STANDARDIZED_TYPES,zd=s.SCOPABLE_TYPES,Hd=s.PUREISH_TYPES,Gd=s.PROPERTY_TYPES,Zd=s.PRIVATE_TYPES,$d=s.PATTERN_TYPES,eu=s.PATTERNLIKE_TYPES,su=s.OBJECTMEMBER_TYPES,au=s.MODULESPECIFIER_TYPES,tu=s.MODULEDECLARATION_TYPES,ru=s.MISCELLANEOUS_TYPES,iu=s.METHOD_TYPES,nu=s.LVAL_TYPES,ou=s.LOOP_TYPES,pu=s.LITERAL_TYPES,lu=s.JSX_TYPES,Tu=s.IMPORTOREXPORTDECLARATION_TYPES,Su=s.IMMUTABLE_TYPES,cu=s.FUNCTION_TYPES,yu=s.FUNCTIONPARENT_TYPES,Eu=s.FOR_TYPES,mu=s.FORXSTATEMENT_TYPES,du=s.FLOW_TYPES,uu=s.FLOWTYPE_TYPES,Au=s.FLOWPREDICATE_TYPES,xu=s.FLOWDECLARATION_TYPES,Pu=s.FLOWBASEANNOTATION_TYPES,Iu=s.EXPRESSION_TYPES,Du=s.EXPRESSIONWRAPPER_TYPES,bu=s.EXPORTDECLARATION_TYPES,Nu=s.ENUMMEMBER_TYPES,Ou=s.ENUMBODY_TYPES,fu=s.DECLARATION_TYPES,gu=s.CONDITIONAL_TYPES,Lu=s.COMPLETIONSTATEMENT_TYPES,Cu=s.CLASS_TYPES,Mu=s.BLOCK_TYPES,Bu=s.BLOCKPARENT_TYPES,Ru=s.BINARY_TYPES,hu=s.ACCESSOR_TYPES,wu=s.UPDATE_OPERATORS,_u=s.UNARY_OPERATORS,Fu=s.STRING_UNARY_OPERATORS,Yu=s.STATEMENT_OR_BLOCK_KEYS,Ku=s.NUMBER_UNARY_OPERATORS,ju=s.NUMBER_BINARY_OPERATORS,Xu=s.NOT_LOCAL_BINDING,Uu=s.LOGICAL_OPERATORS,Ju=s.INHERIT_KEYS,vu=s.FOR_INIT_KEYS,ku=s.FLATTENABLE_KEYS,Vu=s.EQUALITY_BINARY_OPERATORS,Wu=s.COMPARISON_BINARY_OPERATORS,qu=s.COMMENT_KEYS,Qu=s.BOOLEAN_UNARY_OPERATORS,zu=s.BOOLEAN_NUMBER_BINARY_OPERATORS,Hu=s.BOOLEAN_BINARY_OPERATORS,Gu=s.BLOCK_SCOPED_SYMBOL,Zu=s.BINARY_OPERATORS,$u=s.ASSIGNMENT_OPERATORS,eA=s.ALIAS_KEYS,sA=s.BUILDER_KEYS,aA=s.DEPRECATED_ALIASES,tA=s.DEPRECATED_KEYS,rA=s.FLIPPED_ALIAS_KEYS,iA=s.NODE_FIELDS,nA=s.NODE_PARENT_VALIDATIONS,oA=s.PLACEHOLDERS,pA=s.PLACEHOLDERS_ALIAS,lA=s.PLACEHOLDERS_FLIPPED_ALIAS,TA=s.TYPES,SA=s.VISITOR_KEYS,cA=s.isAccessor,yA=s.isAnyTypeAnnotation,EA=s.isArgumentPlaceholder,mA=s.isArrayExpression,dA=s.isArrayPattern,uA=s.isArrayTypeAnnotation,AA=s.isArrowFunctionExpression,xA=s.isAssignmentExpression,PA=s.isAssignmentPattern,IA=s.isAwaitExpression,DA=s.isBigIntLiteral,bA=s.isBinary,NA=s.isBinaryExpression,OA=s.isBindExpression,fA=s.isBlock,gA=s.isBlockParent,LA=s.isBlockStatement,CA=s.isBooleanLiteral,MA=s.isBooleanLiteralTypeAnnotation,BA=s.isBooleanTypeAnnotation,RA=s.isBreakStatement,hA=s.isCallExpression,wA=s.isCatchClause,_A=s.isClass,FA=s.isClassAccessorProperty,YA=s.isClassBody,KA=s.isClassDeclaration,jA=s.isClassExpression,XA=s.isClassImplements,UA=s.isClassMethod,JA=s.isClassPrivateMethod,vA=s.isClassPrivateProperty,kA=s.isClassProperty,VA=s.isCompletionStatement,WA=s.isConditional,qA=s.isConditionalExpression,QA=s.isContinueStatement,zA=s.isDebuggerStatement,HA=s.isDecimalLiteral,GA=s.isDeclaration,ZA=s.isDeclareClass,$A=s.isDeclareExportAllDeclaration,ex=s.isDeclareExportDeclaration,sx=s.isDeclareFunction,ax=s.isDeclareInterface,tx=s.isDeclareModule,rx=s.isDeclareModuleExports,ix=s.isDeclareOpaqueType,nx=s.isDeclareTypeAlias,ox=s.isDeclareVariable,px=s.isDeclaredPredicate,lx=s.isDecorator,Tx=s.isDirective,Sx=s.isDirectiveLiteral,cx=s.isDoExpression,yx=s.isDoWhileStatement,Ex=s.isEmptyStatement,mx=s.isEmptyTypeAnnotation,dx=s.isEnumBody,ux=s.isEnumBooleanBody,Ax=s.isEnumBooleanMember,xx=s.isEnumDeclaration,Px=s.isEnumDefaultedMember,Ix=s.isEnumMember,Dx=s.isEnumNumberBody,bx=s.isEnumNumberMember,Nx=s.isEnumStringBody,Ox=s.isEnumStringMember,fx=s.isEnumSymbolBody,gx=s.isExistsTypeAnnotation,Lx=s.isExportAllDeclaration,Cx=s.isExportDeclaration,Mx=s.isExportDefaultDeclaration,Bx=s.isExportDefaultSpecifier,Rx=s.isExportNamedDeclaration,hx=s.isExportNamespaceSpecifier,wx=s.isExportSpecifier,_x=s.isExpression,Fx=s.isExpressionStatement,Yx=s.isExpressionWrapper,Kx=s.isFile,jx=s.isFlow,Xx=s.isFlowBaseAnnotation,Ux=s.isFlowDeclaration,Jx=s.isFlowPredicate,vx=s.isFlowType,kx=s.isFor,Vx=s.isForInStatement,Wx=s.isForOfStatement,qx=s.isForStatement,Qx=s.isForXStatement,zx=s.isFunction,Hx=s.isFunctionDeclaration,Gx=s.isFunctionExpression,Zx=s.isFunctionParent,$x=s.isFunctionTypeAnnotation,eP=s.isFunctionTypeParam,sP=s.isGenericTypeAnnotation,aP=s.isIdentifier,tP=s.isIfStatement,rP=s.isImport,iP=s.isImportAttribute,nP=s.isImportDeclaration,oP=s.isImportDefaultSpecifier,pP=s.isImportExpression,lP=s.isImportNamespaceSpecifier,TP=s.isImportOrExportDeclaration,SP=s.isImportSpecifier,cP=s.isIndexedAccessType,yP=s.isInferredPredicate,EP=s.isInterfaceDeclaration,mP=s.isInterfaceExtends,dP=s.isInterfaceTypeAnnotation,uP=s.isInterpreterDirective,AP=s.isIntersectionTypeAnnotation,xP=s.isJSX,PP=s.isJSXAttribute,IP=s.isJSXClosingElement,DP=s.isJSXClosingFragment,bP=s.isJSXElement,NP=s.isJSXEmptyExpression,OP=s.isJSXExpressionContainer,fP=s.isJSXFragment,gP=s.isJSXIdentifier,LP=s.isJSXMemberExpression,CP=s.isJSXNamespacedName,MP=s.isJSXOpeningElement,BP=s.isJSXOpeningFragment,RP=s.isJSXSpreadAttribute,hP=s.isJSXSpreadChild,wP=s.isJSXText,_P=s.isLVal,FP=s.isLabeledStatement,YP=s.isLiteral,KP=s.isLogicalExpression,jP=s.isLoop,XP=s.isMemberExpression,UP=s.isMetaProperty,JP=s.isMethod,vP=s.isMiscellaneous,kP=s.isMixedTypeAnnotation,VP=s.isModuleDeclaration,WP=s.isModuleExpression,qP=s.isModuleSpecifier,QP=s.isNewExpression,zP=s.isNoop,HP=s.isNullLiteral,GP=s.isNullLiteralTypeAnnotation,ZP=s.isNullableTypeAnnotation,$P=s.isNumberLiteral,eI=s.isNumberLiteralTypeAnnotation,sI=s.isNumberTypeAnnotation,aI=s.isNumericLiteral,tI=s.isObjectExpression,rI=s.isObjectMember,iI=s.isObjectMethod,nI=s.isObjectPattern,oI=s.isObjectProperty,pI=s.isObjectTypeAnnotation,lI=s.isObjectTypeCallProperty,TI=s.isObjectTypeIndexer,SI=s.isObjectTypeInternalSlot,cI=s.isObjectTypeProperty,yI=s.isObjectTypeSpreadProperty,EI=s.isOpaqueType,mI=s.isOptionalCallExpression,dI=s.isOptionalIndexedAccessType,uI=s.isOptionalMemberExpression,AI=s.isParenthesizedExpression,xI=s.isPattern,PI=s.isPatternLike,II=s.isPipelineBareFunction,DI=s.isPipelinePrimaryTopicReference,bI=s.isPipelineTopicExpression,NI=s.isPlaceholder,OI=s.isPrivate,fI=s.isPrivateName,gI=s.isProgram,LI=s.isProperty,CI=s.isPureish,MI=s.isQualifiedTypeIdentifier,BI=s.isRecordExpression,RI=s.isRegExpLiteral,hI=s.isRegexLiteral,wI=s.isRestElement,_I=s.isRestProperty,FI=s.isReturnStatement,YI=s.isScopable,KI=s.isSequenceExpression,jI=s.isSpreadElement,XI=s.isSpreadProperty,UI=s.isStandardized,JI=s.isStatement,vI=s.isStaticBlock,kI=s.isStringLiteral,VI=s.isStringLiteralTypeAnnotation,WI=s.isStringTypeAnnotation,qI=s.isSuper,QI=s.isSwitchCase,zI=s.isSwitchStatement,HI=s.isSymbolTypeAnnotation,GI=s.isTSAnyKeyword,ZI=s.isTSArrayType,$I=s.isTSAsExpression,eD=s.isTSBaseType,sD=s.isTSBigIntKeyword,aD=s.isTSBooleanKeyword,tD=s.isTSCallSignatureDeclaration,rD=s.isTSConditionalType,iD=s.isTSConstructSignatureDeclaration,nD=s.isTSConstructorType,oD=s.isTSDeclareFunction,pD=s.isTSDeclareMethod,lD=s.isTSEntityName,TD=s.isTSEnumDeclaration,SD=s.isTSEnumMember,cD=s.isTSExportAssignment,yD=s.isTSExpressionWithTypeArguments,ED=s.isTSExternalModuleReference,mD=s.isTSFunctionType,dD=s.isTSImportEqualsDeclaration,uD=s.isTSImportType,AD=s.isTSIndexSignature,xD=s.isTSIndexedAccessType,PD=s.isTSInferType,ID=s.isTSInstantiationExpression,DD=s.isTSInterfaceBody,bD=s.isTSInterfaceDeclaration,ND=s.isTSIntersectionType,OD=s.isTSIntrinsicKeyword,fD=s.isTSLiteralType,gD=s.isTSMappedType,LD=s.isTSMethodSignature,CD=s.isTSModuleBlock,MD=s.isTSModuleDeclaration,BD=s.isTSNamedTupleMember,RD=s.isTSNamespaceExportDeclaration,hD=s.isTSNeverKeyword,wD=s.isTSNonNullExpression,_D=s.isTSNullKeyword,FD=s.isTSNumberKeyword,YD=s.isTSObjectKeyword,KD=s.isTSOptionalType,jD=s.isTSParameterProperty,XD=s.isTSParenthesizedType,UD=s.isTSPropertySignature,JD=s.isTSQualifiedName,vD=s.isTSRestType,kD=s.isTSSatisfiesExpression,VD=s.isTSStringKeyword,WD=s.isTSSymbolKeyword,qD=s.isTSThisType,QD=s.isTSTupleType,zD=s.isTSType,HD=s.isTSTypeAliasDeclaration,GD=s.isTSTypeAnnotation,ZD=s.isTSTypeAssertion,$D=s.isTSTypeElement,eb=s.isTSTypeLiteral,sb=s.isTSTypeOperator,ab=s.isTSTypeParameter,tb=s.isTSTypeParameterDeclaration,rb=s.isTSTypeParameterInstantiation,ib=s.isTSTypePredicate,nb=s.isTSTypeQuery,ob=s.isTSTypeReference,pb=s.isTSUndefinedKeyword,lb=s.isTSUnionType,Tb=s.isTSUnknownKeyword,Sb=s.isTSVoidKeyword,cb=s.isTaggedTemplateExpression,yb=s.isTemplateElement,Eb=s.isTemplateLiteral,mb=s.isTerminatorless,db=s.isThisExpression,ub=s.isThisTypeAnnotation,Ab=s.isThrowStatement,xb=s.isTopicReference,Pb=s.isTryStatement,Ib=s.isTupleExpression,Db=s.isTupleTypeAnnotation,bb=s.isTypeAlias,Nb=s.isTypeAnnotation,Ob=s.isTypeCastExpression,fb=s.isTypeParameter,gb=s.isTypeParameterDeclaration,Lb=s.isTypeParameterInstantiation,Cb=s.isTypeScript,Mb=s.isTypeofTypeAnnotation,Bb=s.isUnaryExpression,Rb=s.isUnaryLike,hb=s.isUnionTypeAnnotation,wb=s.isUpdateExpression,_b=s.isUserWhitespacable,Fb=s.isV8IntrinsicIdentifier,Yb=s.isVariableDeclaration,Kb=s.isVariableDeclarator,jb=s.isVariance,Xb=s.isVoidTypeAnnotation,Ub=s.isWhile,Jb=s.isWhileStatement,vb=s.isWithStatement,kb=s.isYieldExpression;export{hu as ACCESSOR_TYPES,eA as ALIAS_KEYS,$u as ASSIGNMENT_OPERATORS,$S as AnyTypeAnnotation,ec as ArgumentPlaceholder,sc as ArrayExpression,ac as ArrayPattern,tc as ArrayTypeAnnotation,rc as ArrowFunctionExpression,ic as AssignmentExpression,nc as AssignmentPattern,oc as AwaitExpression,Zu as BINARY_OPERATORS,Ru as BINARY_TYPES,Bu as BLOCKPARENT_TYPES,Gu as BLOCK_SCOPED_SYMBOL,Mu as BLOCK_TYPES,Hu as BOOLEAN_BINARY_OPERATORS,zu as BOOLEAN_NUMBER_BINARY_OPERATORS,Qu as BOOLEAN_UNARY_OPERATORS,sA as BUILDER_KEYS,pc as BigIntLiteral,lc as BinaryExpression,Tc as BindExpression,Sc as BlockStatement,cc as BooleanLiteral,yc as BooleanLiteralTypeAnnotation,Ec as BooleanTypeAnnotation,mc as BreakStatement,Cu as CLASS_TYPES,qu as COMMENT_KEYS,Wu as COMPARISON_BINARY_OPERATORS,Lu as COMPLETIONSTATEMENT_TYPES,gu as CONDITIONAL_TYPES,dc as CallExpression,uc as CatchClause,Ac as ClassAccessorProperty,xc as ClassBody,Pc as ClassDeclaration,Ic as ClassExpression,Dc as ClassImplements,bc as ClassMethod,Nc as ClassPrivateMethod,Oc as ClassPrivateProperty,fc as ClassProperty,gc as ConditionalExpression,Lc as ContinueStatement,fu as DECLARATION_TYPES,aA as DEPRECATED_ALIASES,tA as DEPRECATED_KEYS,Cc as DebuggerStatement,Mc as DecimalLiteral,Bc as DeclareClass,Rc as DeclareExportAllDeclaration,hc as DeclareExportDeclaration,wc as DeclareFunction,_c as DeclareInterface,Fc as DeclareModule,Yc as DeclareModuleExports,Kc as DeclareOpaqueType,jc as DeclareTypeAlias,Xc as DeclareVariable,Uc as DeclaredPredicate,Jc as Decorator,vc as Directive,kc as DirectiveLiteral,Vc as DoExpression,Wc as DoWhileStatement,Ou as ENUMBODY_TYPES,Nu as ENUMMEMBER_TYPES,Vu as EQUALITY_BINARY_OPERATORS,bu as EXPORTDECLARATION_TYPES,Du as EXPRESSIONWRAPPER_TYPES,Iu as EXPRESSION_TYPES,qc as EmptyStatement,Qc as EmptyTypeAnnotation,zc as EnumBooleanBody,Hc as EnumBooleanMember,Gc as EnumDeclaration,Zc as EnumDefaultedMember,$c as EnumNumberBody,ey as EnumNumberMember,sy as EnumStringBody,ay as EnumStringMember,ty as EnumSymbolBody,ry as ExistsTypeAnnotation,iy as ExportAllDeclaration,ny as ExportDefaultDeclaration,oy as ExportDefaultSpecifier,py as ExportNamedDeclaration,ly as ExportNamespaceSpecifier,Ty as ExportSpecifier,Sy as ExpressionStatement,ku as FLATTENABLE_KEYS,rA as FLIPPED_ALIAS_KEYS,Pu as FLOWBASEANNOTATION_TYPES,xu as FLOWDECLARATION_TYPES,Au as FLOWPREDICATE_TYPES,uu as FLOWTYPE_TYPES,du as FLOW_TYPES,mu as FORXSTATEMENT_TYPES,vu as FOR_INIT_KEYS,Eu as FOR_TYPES,yu as FUNCTIONPARENT_TYPES,cu as FUNCTION_TYPES,cy as File,yy as ForInStatement,Ey as ForOfStatement,my as ForStatement,dy as FunctionDeclaration,uy as FunctionExpression,Ay as FunctionTypeAnnotation,xy as FunctionTypeParam,Py as GenericTypeAnnotation,Su as IMMUTABLE_TYPES,Tu as IMPORTOREXPORTDECLARATION_TYPES,Ju as INHERIT_KEYS,Iy as Identifier,Dy as IfStatement,by as Import,Ny as ImportAttribute,Oy as ImportDeclaration,fy as ImportDefaultSpecifier,gy as ImportExpression,Ly as ImportNamespaceSpecifier,Cy as ImportSpecifier,My as IndexedAccessType,By as InferredPredicate,Ry as InterfaceDeclaration,hy as InterfaceExtends,wy as InterfaceTypeAnnotation,_y as InterpreterDirective,Fy as IntersectionTypeAnnotation,Yy as JSXAttribute,Ky as JSXClosingElement,jy as JSXClosingFragment,Xy as JSXElement,Uy as JSXEmptyExpression,Jy as JSXExpressionContainer,vy as JSXFragment,ky as JSXIdentifier,Vy as JSXMemberExpression,Wy as JSXNamespacedName,qy as JSXOpeningElement,Qy as JSXOpeningFragment,zy as JSXSpreadAttribute,Hy as JSXSpreadChild,Gy as JSXText,lu as JSX_TYPES,pu as LITERAL_TYPES,Uu as LOGICAL_OPERATORS,ou as LOOP_TYPES,nu as LVAL_TYPES,Zy as LabeledStatement,$y as LogicalExpression,iu as METHOD_TYPES,ru as MISCELLANEOUS_TYPES,tu as MODULEDECLARATION_TYPES,au as MODULESPECIFIER_TYPES,eE as MemberExpression,sE as MetaProperty,aE as MixedTypeAnnotation,tE as ModuleExpression,iA as NODE_FIELDS,nA as NODE_PARENT_VALIDATIONS,Xu as NOT_LOCAL_BINDING,ju as NUMBER_BINARY_OPERATORS,Ku as NUMBER_UNARY_OPERATORS,rE as NewExpression,iE as Noop,nE as NullLiteral,oE as NullLiteralTypeAnnotation,pE as NullableTypeAnnotation,lE as NumberLiteral,TE as NumberLiteralTypeAnnotation,SE as NumberTypeAnnotation,cE as NumericLiteral,su as OBJECTMEMBER_TYPES,yE as ObjectExpression,EE as ObjectMethod,mE as ObjectPattern,dE as ObjectProperty,uE as ObjectTypeAnnotation,AE as ObjectTypeCallProperty,xE as ObjectTypeIndexer,PE as ObjectTypeInternalSlot,IE as ObjectTypeProperty,DE as ObjectTypeSpreadProperty,bE as OpaqueType,NE as OptionalCallExpression,OE as OptionalIndexedAccessType,fE as OptionalMemberExpression,eu as PATTERNLIKE_TYPES,$d as PATTERN_TYPES,oA as PLACEHOLDERS,pA as PLACEHOLDERS_ALIAS,lA as PLACEHOLDERS_FLIPPED_ALIAS,Zd as PRIVATE_TYPES,Gd as PROPERTY_TYPES,Hd as PUREISH_TYPES,gE as ParenthesizedExpression,LE as PipelineBareFunction,CE as PipelinePrimaryTopicReference,ME as PipelineTopicExpression,BE as Placeholder,RE as PrivateName,hE as Program,wE as QualifiedTypeIdentifier,_E as RecordExpression,FE as RegExpLiteral,YE as RegexLiteral,KE as RestElement,jE as RestProperty,XE as ReturnStatement,zd as SCOPABLE_TYPES,Qd as STANDARDIZED_TYPES,Yu as STATEMENT_OR_BLOCK_KEYS,qd as STATEMENT_TYPES,Fu as STRING_UNARY_OPERATORS,UE as SequenceExpression,JE as SpreadElement,vE as SpreadProperty,kE as StaticBlock,VE as StringLiteral,WE as StringLiteralTypeAnnotation,qE as StringTypeAnnotation,QE as Super,zE as SwitchCase,HE as SwitchStatement,GE as SymbolTypeAnnotation,Wd as TERMINATORLESS_TYPES,ZE as TSAnyKeyword,$E as TSArrayType,em as TSAsExpression,Vd as TSBASETYPE_TYPES,sm as TSBigIntKeyword,am as TSBooleanKeyword,tm as TSCallSignatureDeclaration,rm as TSConditionalType,im as TSConstructSignatureDeclaration,nm as TSConstructorType,om as TSDeclareFunction,pm as TSDeclareMethod,kd as TSENTITYNAME_TYPES,lm as TSEnumDeclaration,Tm as TSEnumMember,Sm as TSExportAssignment,cm as TSExpressionWithTypeArguments,ym as TSExternalModuleReference,Em as TSFunctionType,mm as TSImportEqualsDeclaration,dm as TSImportType,um as TSIndexSignature,Am as TSIndexedAccessType,xm as TSInferType,Pm as TSInstantiationExpression,Im as TSInterfaceBody,Dm as TSInterfaceDeclaration,bm as TSIntersectionType,Nm as TSIntrinsicKeyword,Om as TSLiteralType,fm as TSMappedType,gm as TSMethodSignature,Lm as TSModuleBlock,Cm as TSModuleDeclaration,Mm as TSNamedTupleMember,Bm as TSNamespaceExportDeclaration,Rm as TSNeverKeyword,hm as TSNonNullExpression,wm as TSNullKeyword,_m as TSNumberKeyword,Fm as TSObjectKeyword,Ym as TSOptionalType,Km as TSParameterProperty,jm as TSParenthesizedType,Xm as TSPropertySignature,Um as TSQualifiedName,Jm as TSRestType,vm as TSSatisfiesExpression,km as TSStringKeyword,Vm as TSSymbolKeyword,vd as TSTYPEELEMENT_TYPES,Jd as TSTYPE_TYPES,Wm as TSThisType,qm as TSTupleType,Qm as TSTypeAliasDeclaration,zm as TSTypeAnnotation,Hm as TSTypeAssertion,Gm as TSTypeLiteral,Zm as TSTypeOperator,$m as TSTypeParameter,ed as TSTypeParameterDeclaration,sd as TSTypeParameterInstantiation,ad as TSTypePredicate,td as TSTypeQuery,rd as TSTypeReference,id as TSUndefinedKeyword,nd as TSUnionType,od as TSUnknownKeyword,pd as TSVoidKeyword,TA as TYPES,Ud as TYPESCRIPT_TYPES,ld as TaggedTemplateExpression,Td as TemplateElement,Sd as TemplateLiteral,cd as ThisExpression,yd as ThisTypeAnnotation,Ed as ThrowStatement,md as TopicReference,dd as TryStatement,ud as TupleExpression,Ad as TupleTypeAnnotation,xd as TypeAlias,Pd as TypeAnnotation,Id as TypeCastExpression,Dd as TypeParameter,bd as TypeParameterDeclaration,Nd as TypeParameterInstantiation,Od as TypeofTypeAnnotation,Xd as UNARYLIKE_TYPES,_u as UNARY_OPERATORS,wu as UPDATE_OPERATORS,jd as USERWHITESPACABLE_TYPES,fd as UnaryExpression,gd as UnionTypeAnnotation,Ld as UpdateExpression,Cd as V8IntrinsicIdentifier,SA as VISITOR_KEYS,Md as VariableDeclaration,Bd as VariableDeclarator,Rd as Variance,hd as VoidTypeAnnotation,Kd as WHILE_TYPES,wd as WhileStatement,_d as WithStatement,Fd as YieldExpression,a as __esModule,t as __internal__deprecationWarning,r as addComment,i as addComments,Ui as anyTypeAnnotation,n as appendToMemberExpression,Ji as argumentPlaceholder,vi as arrayExpression,ki as arrayPattern,Vi as arrayTypeAnnotation,Wi as arrowFunctionExpression,oe as assertAccessor,pe as assertAnyTypeAnnotation,le as assertArgumentPlaceholder,Te as assertArrayExpression,Se as assertArrayPattern,ce as assertArrayTypeAnnotation,ye as assertArrowFunctionExpression,Ee as assertAssignmentExpression,me as assertAssignmentPattern,de as assertAwaitExpression,ue as assertBigIntLiteral,Ae as assertBinary,xe as assertBinaryExpression,Pe as assertBindExpression,Ie as assertBlock,De as assertBlockParent,be as assertBlockStatement,Ne as assertBooleanLiteral,Oe as assertBooleanLiteralTypeAnnotation,fe as assertBooleanTypeAnnotation,ge as assertBreakStatement,Le as assertCallExpression,Ce as assertCatchClause,Me as assertClass,Be as assertClassAccessorProperty,Re as assertClassBody,he as assertClassDeclaration,we as assertClassExpression,_e as assertClassImplements,Fe as assertClassMethod,Ye as assertClassPrivateMethod,Ke as assertClassPrivateProperty,je as assertClassProperty,Xe as assertCompletionStatement,Ue as assertConditional,Je as assertConditionalExpression,ve as assertContinueStatement,ke as assertDebuggerStatement,Ve as assertDecimalLiteral,We as assertDeclaration,qe as assertDeclareClass,Qe as assertDeclareExportAllDeclaration,ze as assertDeclareExportDeclaration,He as assertDeclareFunction,Ge as assertDeclareInterface,Ze as assertDeclareModule,$e as assertDeclareModuleExports,es as assertDeclareOpaqueType,ss as assertDeclareTypeAlias,as as assertDeclareVariable,ts as assertDeclaredPredicate,rs as assertDecorator,is as assertDirective,ns as assertDirectiveLiteral,os as assertDoExpression,ps as assertDoWhileStatement,ls as assertEmptyStatement,Ts as assertEmptyTypeAnnotation,Ss as assertEnumBody,cs as assertEnumBooleanBody,ys as assertEnumBooleanMember,Es as assertEnumDeclaration,ms as assertEnumDefaultedMember,ds as assertEnumMember,us as assertEnumNumberBody,As as assertEnumNumberMember,xs as assertEnumStringBody,Ps as assertEnumStringMember,Is as assertEnumSymbolBody,Ds as assertExistsTypeAnnotation,bs as assertExportAllDeclaration,Ns as assertExportDeclaration,Os as assertExportDefaultDeclaration,fs as assertExportDefaultSpecifier,gs as assertExportNamedDeclaration,Ls as assertExportNamespaceSpecifier,Cs as assertExportSpecifier,Ms as assertExpression,Bs as assertExpressionStatement,Rs as assertExpressionWrapper,hs as assertFile,ws as assertFlow,_s as assertFlowBaseAnnotation,Fs as assertFlowDeclaration,Ys as assertFlowPredicate,Ks as assertFlowType,js as assertFor,Xs as assertForInStatement,Us as assertForOfStatement,Js as assertForStatement,vs as assertForXStatement,ks as assertFunction,Vs as assertFunctionDeclaration,Ws as assertFunctionExpression,qs as assertFunctionParent,Qs as assertFunctionTypeAnnotation,zs as assertFunctionTypeParam,Hs as assertGenericTypeAnnotation,Gs as assertIdentifier,Zs as assertIfStatement,$s as assertImmutable,ea as assertImport,sa as assertImportAttribute,aa as assertImportDeclaration,ta as assertImportDefaultSpecifier,ra as assertImportExpression,ia as assertImportNamespaceSpecifier,na as assertImportOrExportDeclaration,oa as assertImportSpecifier,pa as assertIndexedAccessType,la as assertInferredPredicate,Ta as assertInterfaceDeclaration,Sa as assertInterfaceExtends,ca as assertInterfaceTypeAnnotation,ya as assertInterpreterDirective,Ea as assertIntersectionTypeAnnotation,ma as assertJSX,da as assertJSXAttribute,ua as assertJSXClosingElement,Aa as assertJSXClosingFragment,xa as assertJSXElement,Pa as assertJSXEmptyExpression,Ia as assertJSXExpressionContainer,Da as assertJSXFragment,ba as assertJSXIdentifier,Na as assertJSXMemberExpression,Oa as assertJSXNamespacedName,fa as assertJSXOpeningElement,ga as assertJSXOpeningFragment,La as assertJSXSpreadAttribute,Ca as assertJSXSpreadChild,Ma as assertJSXText,Ba as assertLVal,Ra as assertLabeledStatement,ha as assertLiteral,wa as assertLogicalExpression,_a as assertLoop,Fa as assertMemberExpression,Ya as assertMetaProperty,Ka as assertMethod,ja as assertMiscellaneous,Xa as assertMixedTypeAnnotation,Ua as assertModuleDeclaration,Ja as assertModuleExpression,va as assertModuleSpecifier,ka as assertNewExpression,o as assertNode,Va as assertNoop,Wa as assertNullLiteral,qa as assertNullLiteralTypeAnnotation,Qa as assertNullableTypeAnnotation,za as assertNumberLiteral,Ha as assertNumberLiteralTypeAnnotation,Ga as assertNumberTypeAnnotation,Za as assertNumericLiteral,$a as assertObjectExpression,et as assertObjectMember,st as assertObjectMethod,at as assertObjectPattern,tt as assertObjectProperty,rt as assertObjectTypeAnnotation,it as assertObjectTypeCallProperty,nt as assertObjectTypeIndexer,ot as assertObjectTypeInternalSlot,pt as assertObjectTypeProperty,lt as assertObjectTypeSpreadProperty,Tt as assertOpaqueType,St as assertOptionalCallExpression,ct as assertOptionalIndexedAccessType,yt as assertOptionalMemberExpression,Et as assertParenthesizedExpression,mt as assertPattern,dt as assertPatternLike,ut as assertPipelineBareFunction,At as assertPipelinePrimaryTopicReference,xt as assertPipelineTopicExpression,Pt as assertPlaceholder,It as assertPrivate,Dt as assertPrivateName,bt as assertProgram,Nt as assertProperty,Ot as assertPureish,ft as assertQualifiedTypeIdentifier,gt as assertRecordExpression,Lt as assertRegExpLiteral,Ct as assertRegexLiteral,Mt as assertRestElement,Bt as assertRestProperty,Rt as assertReturnStatement,ht as assertScopable,wt as assertSequenceExpression,_t as assertSpreadElement,Ft as assertSpreadProperty,Yt as assertStandardized,Kt as assertStatement,jt as assertStaticBlock,Xt as assertStringLiteral,Ut as assertStringLiteralTypeAnnotation,Jt as assertStringTypeAnnotation,vt as assertSuper,kt as assertSwitchCase,Vt as assertSwitchStatement,Wt as assertSymbolTypeAnnotation,qt as assertTSAnyKeyword,Qt as assertTSArrayType,zt as assertTSAsExpression,Ht as assertTSBaseType,Gt as assertTSBigIntKeyword,Zt as assertTSBooleanKeyword,$t as assertTSCallSignatureDeclaration,er as assertTSConditionalType,sr as assertTSConstructSignatureDeclaration,ar as assertTSConstructorType,tr as assertTSDeclareFunction,rr as assertTSDeclareMethod,ir as assertTSEntityName,nr as assertTSEnumDeclaration,or as assertTSEnumMember,pr as assertTSExportAssignment,lr as assertTSExpressionWithTypeArguments,Tr as assertTSExternalModuleReference,Sr as assertTSFunctionType,cr as assertTSImportEqualsDeclaration,yr as assertTSImportType,Er as assertTSIndexSignature,mr as assertTSIndexedAccessType,dr as assertTSInferType,ur as assertTSInstantiationExpression,Ar as assertTSInterfaceBody,xr as assertTSInterfaceDeclaration,Pr as assertTSIntersectionType,Ir as assertTSIntrinsicKeyword,Dr as assertTSLiteralType,br as assertTSMappedType,Nr as assertTSMethodSignature,Or as assertTSModuleBlock,fr as assertTSModuleDeclaration,gr as assertTSNamedTupleMember,Lr as assertTSNamespaceExportDeclaration,Cr as assertTSNeverKeyword,Mr as assertTSNonNullExpression,Br as assertTSNullKeyword,Rr as assertTSNumberKeyword,hr as assertTSObjectKeyword,wr as assertTSOptionalType,_r as assertTSParameterProperty,Fr as assertTSParenthesizedType,Yr as assertTSPropertySignature,Kr as assertTSQualifiedName,jr as assertTSRestType,Xr as assertTSSatisfiesExpression,Ur as assertTSStringKeyword,Jr as assertTSSymbolKeyword,vr as assertTSThisType,kr as assertTSTupleType,Vr as assertTSType,Wr as assertTSTypeAliasDeclaration,qr as assertTSTypeAnnotation,Qr as assertTSTypeAssertion,zr as assertTSTypeElement,Hr as assertTSTypeLiteral,Gr as assertTSTypeOperator,Zr as assertTSTypeParameter,$r as assertTSTypeParameterDeclaration,ei as assertTSTypeParameterInstantiation,si as assertTSTypePredicate,ai as assertTSTypeQuery,ti as assertTSTypeReference,ri as assertTSUndefinedKeyword,ii as assertTSUnionType,ni as assertTSUnknownKeyword,oi as assertTSVoidKeyword,pi as assertTaggedTemplateExpression,li as assertTemplateElement,Ti as assertTemplateLiteral,Si as assertTerminatorless,ci as assertThisExpression,yi as assertThisTypeAnnotation,Ei as assertThrowStatement,mi as assertTopicReference,di as assertTryStatement,ui as assertTupleExpression,Ai as assertTupleTypeAnnotation,xi as assertTypeAlias,Pi as assertTypeAnnotation,Ii as assertTypeCastExpression,Di as assertTypeParameter,bi as assertTypeParameterDeclaration,Ni as assertTypeParameterInstantiation,Oi as assertTypeScript,fi as assertTypeofTypeAnnotation,gi as assertUnaryExpression,Li as assertUnaryLike,Ci as assertUnionTypeAnnotation,Mi as assertUpdateExpression,Bi as assertUserWhitespacable,Ri as assertV8IntrinsicIdentifier,hi as assertVariableDeclaration,wi as assertVariableDeclarator,_i as assertVariance,Fi as assertVoidTypeAnnotation,Yi as assertWhile,Ki as assertWhileStatement,ji as assertWithStatement,Xi as assertYieldExpression,qi as assignmentExpression,Qi as assignmentPattern,zi as awaitExpression,Hi as bigIntLiteral,Gi as binaryExpression,Zi as bindExpression,$i as blockStatement,en as booleanLiteral,sn as booleanLiteralTypeAnnotation,an as booleanTypeAnnotation,tn as breakStatement,p as buildMatchMemberExpression,Yd as buildUndefinedNode,rn as callExpression,nn as catchClause,on as classAccessorProperty,pn as classBody,ln as classDeclaration,Tn as classExpression,Sn as classImplements,cn as classMethod,yn as classPrivateMethod,En as classPrivateProperty,mn as classProperty,l as clone,T as cloneDeep,S as cloneDeepWithoutLoc,c as cloneNode,y as cloneWithoutLoc,dn as conditionalExpression,un as continueStatement,E as createFlowUnionType,m as createTSUnionType,d as createTypeAnnotationBasedOnTypeof,u as createUnionTypeAnnotation,An as debuggerStatement,xn as decimalLiteral,Pn as declareClass,In as declareExportAllDeclaration,Dn as declareExportDeclaration,bn as declareFunction,Nn as declareInterface,On as declareModule,fn as declareModuleExports,gn as declareOpaqueType,Ln as declareTypeAlias,Cn as declareVariable,Mn as declaredPredicate,Bn as decorator,s as default,Rn as directive,hn as directiveLiteral,wn as doExpression,_n as doWhileStatement,Fn as emptyStatement,Yn as emptyTypeAnnotation,A as ensureBlock,Kn as enumBooleanBody,jn as enumBooleanMember,Xn as enumDeclaration,Un as enumDefaultedMember,Jn as enumNumberBody,vn as enumNumberMember,kn as enumStringBody,Vn as enumStringMember,Wn as enumSymbolBody,qn as existsTypeAnnotation,Qn as exportAllDeclaration,zn as exportDefaultDeclaration,Hn as exportDefaultSpecifier,Gn as exportNamedDeclaration,Zn as exportNamespaceSpecifier,$n as exportSpecifier,eo as expressionStatement,so as file,ao as forInStatement,to as forOfStatement,ro as forStatement,io as functionDeclaration,no as functionExpression,oo as functionTypeAnnotation,po as functionTypeParam,lo as genericTypeAnnotation,x as getBindingIdentifiers,P as getOuterBindingIdentifiers,To as identifier,So as ifStatement,co as import,yo as importAttribute,Eo as importDeclaration,mo as importDefaultSpecifier,uo as importExpression,Ao as importNamespaceSpecifier,xo as importSpecifier,Po as indexedAccessType,Io as inferredPredicate,I as inheritInnerComments,D as inheritLeadingComments,b as inheritTrailingComments,N as inherits,O as inheritsComments,Do as interfaceDeclaration,bo as interfaceExtends,No as interfaceTypeAnnotation,Oo as interpreterDirective,fo as intersectionTypeAnnotation,f as is,cA as isAccessor,yA as isAnyTypeAnnotation,EA as isArgumentPlaceholder,mA as isArrayExpression,dA as isArrayPattern,uA as isArrayTypeAnnotation,AA as isArrowFunctionExpression,xA as isAssignmentExpression,PA as isAssignmentPattern,IA as isAwaitExpression,DA as isBigIntLiteral,bA as isBinary,NA as isBinaryExpression,OA as isBindExpression,g as isBinding,fA as isBlock,gA as isBlockParent,L as isBlockScoped,LA as isBlockStatement,CA as isBooleanLiteral,MA as isBooleanLiteralTypeAnnotation,BA as isBooleanTypeAnnotation,RA as isBreakStatement,hA as isCallExpression,wA as isCatchClause,_A as isClass,FA as isClassAccessorProperty,YA as isClassBody,KA as isClassDeclaration,jA as isClassExpression,XA as isClassImplements,UA as isClassMethod,JA as isClassPrivateMethod,vA as isClassPrivateProperty,kA as isClassProperty,VA as isCompletionStatement,WA as isConditional,qA as isConditionalExpression,QA as isContinueStatement,zA as isDebuggerStatement,HA as isDecimalLiteral,GA as isDeclaration,ZA as isDeclareClass,$A as isDeclareExportAllDeclaration,ex as isDeclareExportDeclaration,sx as isDeclareFunction,ax as isDeclareInterface,tx as isDeclareModule,rx as isDeclareModuleExports,ix as isDeclareOpaqueType,nx as isDeclareTypeAlias,ox as isDeclareVariable,px as isDeclaredPredicate,lx as isDecorator,Tx as isDirective,Sx as isDirectiveLiteral,cx as isDoExpression,yx as isDoWhileStatement,Ex as isEmptyStatement,mx as isEmptyTypeAnnotation,dx as isEnumBody,ux as isEnumBooleanBody,Ax as isEnumBooleanMember,xx as isEnumDeclaration,Px as isEnumDefaultedMember,Ix as isEnumMember,Dx as isEnumNumberBody,bx as isEnumNumberMember,Nx as isEnumStringBody,Ox as isEnumStringMember,fx as isEnumSymbolBody,gx as isExistsTypeAnnotation,Lx as isExportAllDeclaration,Cx as isExportDeclaration,Mx as isExportDefaultDeclaration,Bx as isExportDefaultSpecifier,Rx as isExportNamedDeclaration,hx as isExportNamespaceSpecifier,wx as isExportSpecifier,_x as isExpression,Fx as isExpressionStatement,Yx as isExpressionWrapper,Kx as isFile,jx as isFlow,Xx as isFlowBaseAnnotation,Ux as isFlowDeclaration,Jx as isFlowPredicate,vx as isFlowType,kx as isFor,Vx as isForInStatement,Wx as isForOfStatement,qx as isForStatement,Qx as isForXStatement,zx as isFunction,Hx as isFunctionDeclaration,Gx as isFunctionExpression,Zx as isFunctionParent,$x as isFunctionTypeAnnotation,eP as isFunctionTypeParam,sP as isGenericTypeAnnotation,aP as isIdentifier,tP as isIfStatement,C as isImmutable,rP as isImport,iP as isImportAttribute,nP as isImportDeclaration,oP as isImportDefaultSpecifier,pP as isImportExpression,lP as isImportNamespaceSpecifier,TP as isImportOrExportDeclaration,SP as isImportSpecifier,cP as isIndexedAccessType,yP as isInferredPredicate,EP as isInterfaceDeclaration,mP as isInterfaceExtends,dP as isInterfaceTypeAnnotation,uP as isInterpreterDirective,AP as isIntersectionTypeAnnotation,xP as isJSX,PP as isJSXAttribute,IP as isJSXClosingElement,DP as isJSXClosingFragment,bP as isJSXElement,NP as isJSXEmptyExpression,OP as isJSXExpressionContainer,fP as isJSXFragment,gP as isJSXIdentifier,LP as isJSXMemberExpression,CP as isJSXNamespacedName,MP as isJSXOpeningElement,BP as isJSXOpeningFragment,RP as isJSXSpreadAttribute,hP as isJSXSpreadChild,wP as isJSXText,_P as isLVal,FP as isLabeledStatement,M as isLet,YP as isLiteral,KP as isLogicalExpression,jP as isLoop,XP as isMemberExpression,UP as isMetaProperty,JP as isMethod,vP as isMiscellaneous,kP as isMixedTypeAnnotation,VP as isModuleDeclaration,WP as isModuleExpression,qP as isModuleSpecifier,QP as isNewExpression,B as isNode,R as isNodesEquivalent,zP as isNoop,HP as isNullLiteral,GP as isNullLiteralTypeAnnotation,ZP as isNullableTypeAnnotation,$P as isNumberLiteral,eI as isNumberLiteralTypeAnnotation,sI as isNumberTypeAnnotation,aI as isNumericLiteral,tI as isObjectExpression,rI as isObjectMember,iI as isObjectMethod,nI as isObjectPattern,oI as isObjectProperty,pI as isObjectTypeAnnotation,lI as isObjectTypeCallProperty,TI as isObjectTypeIndexer,SI as isObjectTypeInternalSlot,cI as isObjectTypeProperty,yI as isObjectTypeSpreadProperty,EI as isOpaqueType,mI as isOptionalCallExpression,dI as isOptionalIndexedAccessType,uI as isOptionalMemberExpression,AI as isParenthesizedExpression,xI as isPattern,PI as isPatternLike,II as isPipelineBareFunction,DI as isPipelinePrimaryTopicReference,bI as isPipelineTopicExpression,NI as isPlaceholder,h as isPlaceholderType,OI as isPrivate,fI as isPrivateName,gI as isProgram,LI as isProperty,CI as isPureish,MI as isQualifiedTypeIdentifier,BI as isRecordExpression,w as isReferenced,RI as isRegExpLiteral,hI as isRegexLiteral,wI as isRestElement,_I as isRestProperty,FI as isReturnStatement,YI as isScopable,_ as isScope,KI as isSequenceExpression,F as isSpecifierDefault,jI as isSpreadElement,XI as isSpreadProperty,UI as isStandardized,JI as isStatement,vI as isStaticBlock,kI as isStringLiteral,VI as isStringLiteralTypeAnnotation,WI as isStringTypeAnnotation,qI as isSuper,QI as isSwitchCase,zI as isSwitchStatement,HI as isSymbolTypeAnnotation,GI as isTSAnyKeyword,ZI as isTSArrayType,$I as isTSAsExpression,eD as isTSBaseType,sD as isTSBigIntKeyword,aD as isTSBooleanKeyword,tD as isTSCallSignatureDeclaration,rD as isTSConditionalType,iD as isTSConstructSignatureDeclaration,nD as isTSConstructorType,oD as isTSDeclareFunction,pD as isTSDeclareMethod,lD as isTSEntityName,TD as isTSEnumDeclaration,SD as isTSEnumMember,cD as isTSExportAssignment,yD as isTSExpressionWithTypeArguments,ED as isTSExternalModuleReference,mD as isTSFunctionType,dD as isTSImportEqualsDeclaration,uD as isTSImportType,AD as isTSIndexSignature,xD as isTSIndexedAccessType,PD as isTSInferType,ID as isTSInstantiationExpression,DD as isTSInterfaceBody,bD as isTSInterfaceDeclaration,ND as isTSIntersectionType,OD as isTSIntrinsicKeyword,fD as isTSLiteralType,gD as isTSMappedType,LD as isTSMethodSignature,CD as isTSModuleBlock,MD as isTSModuleDeclaration,BD as isTSNamedTupleMember,RD as isTSNamespaceExportDeclaration,hD as isTSNeverKeyword,wD as isTSNonNullExpression,_D as isTSNullKeyword,FD as isTSNumberKeyword,YD as isTSObjectKeyword,KD as isTSOptionalType,jD as isTSParameterProperty,XD as isTSParenthesizedType,UD as isTSPropertySignature,JD as isTSQualifiedName,vD as isTSRestType,kD as isTSSatisfiesExpression,VD as isTSStringKeyword,WD as isTSSymbolKeyword,qD as isTSThisType,QD as isTSTupleType,zD as isTSType,HD as isTSTypeAliasDeclaration,GD as isTSTypeAnnotation,ZD as isTSTypeAssertion,$D as isTSTypeElement,eb as isTSTypeLiteral,sb as isTSTypeOperator,ab as isTSTypeParameter,tb as isTSTypeParameterDeclaration,rb as isTSTypeParameterInstantiation,ib as isTSTypePredicate,nb as isTSTypeQuery,ob as isTSTypeReference,pb as isTSUndefinedKeyword,lb as isTSUnionType,Tb as isTSUnknownKeyword,Sb as isTSVoidKeyword,cb as isTaggedTemplateExpression,yb as isTemplateElement,Eb as isTemplateLiteral,mb as isTerminatorless,db as isThisExpression,ub as isThisTypeAnnotation,Ab as isThrowStatement,xb as isTopicReference,Pb as isTryStatement,Ib as isTupleExpression,Db as isTupleTypeAnnotation,Y as isType,bb as isTypeAlias,Nb as isTypeAnnotation,Ob as isTypeCastExpression,fb as isTypeParameter,gb as isTypeParameterDeclaration,Lb as isTypeParameterInstantiation,Cb as isTypeScript,Mb as isTypeofTypeAnnotation,Bb as isUnaryExpression,Rb as isUnaryLike,hb as isUnionTypeAnnotation,wb as isUpdateExpression,_b as isUserWhitespacable,Fb as isV8IntrinsicIdentifier,K as isValidES3Identifier,j as isValidIdentifier,X as isVar,Yb as isVariableDeclaration,Kb as isVariableDeclarator,jb as isVariance,Xb as isVoidTypeAnnotation,Ub as isWhile,Jb as isWhileStatement,vb as isWithStatement,kb as isYieldExpression,go as jSXAttribute,Co as jSXClosingElement,Bo as jSXClosingFragment,ho as jSXElement,_o as jSXEmptyExpression,Yo as jSXExpressionContainer,jo as jSXFragment,Uo as jSXIdentifier,vo as jSXMemberExpression,Vo as jSXNamespacedName,qo as jSXOpeningElement,zo as jSXOpeningFragment,Go as jSXSpreadAttribute,$o as jSXSpreadChild,sp as jSXText,Lo as jsxAttribute,Mo as jsxClosingElement,Ro as jsxClosingFragment,wo as jsxElement,Fo as jsxEmptyExpression,Ko as jsxExpressionContainer,Xo as jsxFragment,Jo as jsxIdentifier,ko as jsxMemberExpression,Wo as jsxNamespacedName,Qo as jsxOpeningElement,Ho as jsxOpeningFragment,Zo as jsxSpreadAttribute,ep as jsxSpreadChild,ap as jsxText,tp as labeledStatement,rp as logicalExpression,U as matchesPattern,ip as memberExpression,np as metaProperty,op as mixedTypeAnnotation,pp as moduleExpression,lp as newExpression,Tp as noop,Sp as nullLiteral,cp as nullLiteralTypeAnnotation,yp as nullableTypeAnnotation,Ep as numberLiteral,mp as numberLiteralTypeAnnotation,dp as numberTypeAnnotation,up as numericLiteral,Ap as objectExpression,xp as objectMethod,Pp as objectPattern,Ip as objectProperty,Dp as objectTypeAnnotation,bp as objectTypeCallProperty,Np as objectTypeIndexer,Op as objectTypeInternalSlot,fp as objectTypeProperty,gp as objectTypeSpreadProperty,Lp as opaqueType,Cp as optionalCallExpression,Mp as optionalIndexedAccessType,Bp as optionalMemberExpression,Rp as parenthesizedExpression,hp as pipelineBareFunction,wp as pipelinePrimaryTopicReference,_p as pipelineTopicExpression,Fp as placeholder,J as prependToMemberExpression,Yp as privateName,Kp as program,jp as qualifiedTypeIdentifier,v as react,Xp as recordExpression,Up as regExpLiteral,Jp as regexLiteral,k as removeComments,V as removeProperties,W as removePropertiesDeep,q as removeTypeDuplicates,vp as restElement,kp as restProperty,Vp as returnStatement,Wp as sequenceExpression,Q as shallowEqual,qp as spreadElement,Qp as spreadProperty,zp as staticBlock,Hp as stringLiteral,Gp as stringLiteralTypeAnnotation,Zp as stringTypeAnnotation,$p as super,el as switchCase,sl as switchStatement,al as symbolTypeAnnotation,Sl as tSAnyKeyword,yl as tSArrayType,ml as tSAsExpression,ul as tSBigIntKeyword,xl as tSBooleanKeyword,Il as tSCallSignatureDeclaration,bl as tSConditionalType,Ol as tSConstructSignatureDeclaration,gl as tSConstructorType,Cl as tSDeclareFunction,Bl as tSDeclareMethod,hl as tSEnumDeclaration,_l as tSEnumMember,Yl as tSExportAssignment,jl as tSExpressionWithTypeArguments,Ul as tSExternalModuleReference,vl as tSFunctionType,Vl as tSImportEqualsDeclaration,ql as tSImportType,zl as tSIndexSignature,Gl as tSIndexedAccessType,$l as tSInferType,sT as tSInstantiationExpression,tT as tSInterfaceBody,iT as tSInterfaceDeclaration,oT as tSIntersectionType,lT as tSIntrinsicKeyword,ST as tSLiteralType,yT as tSMappedType,mT as tSMethodSignature,uT as tSModuleBlock,xT as tSModuleDeclaration,IT as tSNamedTupleMember,bT as tSNamespaceExportDeclaration,OT as tSNeverKeyword,gT as tSNonNullExpression,CT as tSNullKeyword,BT as tSNumberKeyword,hT as tSObjectKeyword,_T as tSOptionalType,YT as tSParameterProperty,jT as tSParenthesizedType,UT as tSPropertySignature,vT as tSQualifiedName,VT as tSRestType,qT as tSSatisfiesExpression,zT as tSStringKeyword,GT as tSSymbolKeyword,$T as tSThisType,sS as tSTupleType,tS as tSTypeAliasDeclaration,iS as tSTypeAnnotation,oS as tSTypeAssertion,lS as tSTypeLiteral,SS as tSTypeOperator,yS as tSTypeParameter,mS as tSTypeParameterDeclaration,uS as tSTypeParameterInstantiation,xS as tSTypePredicate,IS as tSTypeQuery,bS as tSTypeReference,OS as tSUndefinedKeyword,gS as tSUnionType,CS as tSUnknownKeyword,BS as tSVoidKeyword,tl as taggedTemplateExpression,rl as templateElement,il as templateLiteral,nl as thisExpression,ol as thisTypeAnnotation,pl as throwStatement,z as toBindingIdentifierName,H as toBlock,G as toComputedKey,Z as toExpression,$ as toIdentifier,ee as toKeyAlias,ne as toSequenceExpression,se as toStatement,ll as topicReference,ae as traverse,te as traverseFast,Tl as tryStatement,cl as tsAnyKeyword,El as tsArrayType,dl as tsAsExpression,Al as tsBigIntKeyword,Pl as tsBooleanKeyword,Dl as tsCallSignatureDeclaration,Nl as tsConditionalType,fl as tsConstructSignatureDeclaration,Ll as tsConstructorType,Ml as tsDeclareFunction,Rl as tsDeclareMethod,wl as tsEnumDeclaration,Fl as tsEnumMember,Kl as tsExportAssignment,Xl as tsExpressionWithTypeArguments,Jl as tsExternalModuleReference,kl as tsFunctionType,Wl as tsImportEqualsDeclaration,Ql as tsImportType,Hl as tsIndexSignature,Zl as tsIndexedAccessType,eT as tsInferType,aT as tsInstantiationExpression,rT as tsInterfaceBody,nT as tsInterfaceDeclaration,pT as tsIntersectionType,TT as tsIntrinsicKeyword,cT as tsLiteralType,ET as tsMappedType,dT as tsMethodSignature,AT as tsModuleBlock,PT as tsModuleDeclaration,DT as tsNamedTupleMember,NT as tsNamespaceExportDeclaration,fT as tsNeverKeyword,LT as tsNonNullExpression,MT as tsNullKeyword,RT as tsNumberKeyword,wT as tsObjectKeyword,FT as tsOptionalType,KT as tsParameterProperty,XT as tsParenthesizedType,JT as tsPropertySignature,kT as tsQualifiedName,WT as tsRestType,QT as tsSatisfiesExpression,HT as tsStringKeyword,ZT as tsSymbolKeyword,eS as tsThisType,aS as tsTupleType,rS as tsTypeAliasDeclaration,nS as tsTypeAnnotation,pS as tsTypeAssertion,TS as tsTypeLiteral,cS as tsTypeOperator,ES as tsTypeParameter,dS as tsTypeParameterDeclaration,AS as tsTypeParameterInstantiation,PS as tsTypePredicate,DS as tsTypeQuery,NS as tsTypeReference,fS as tsUndefinedKeyword,LS as tsUnionType,MS as tsUnknownKeyword,RS as tsVoidKeyword,hS as tupleExpression,wS as tupleTypeAnnotation,_S as typeAlias,FS as typeAnnotation,YS as typeCastExpression,KS as typeParameter,jS as typeParameterDeclaration,XS as typeParameterInstantiation,US as typeofTypeAnnotation,JS as unaryExpression,vS as unionTypeAnnotation,kS as updateExpression,VS as v8IntrinsicIdentifier,re as validate,ie as valueToNode,WS as variableDeclaration,qS as variableDeclarator,QS as variance,zS as voidTypeAnnotation,HS as whileStatement,GS as withStatement,ZS as yieldExpression};

